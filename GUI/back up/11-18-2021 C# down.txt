using System;

using System.Drawing;

using System.Windows.Forms;
using System.IO.Ports;
using ZedGraph;
using System.Linq;

namespace ECE_323_LAB_10
{




    public partial class Form1 : Form
    {
        PointPairList list = new PointPairList();

        // initalize variables
        const int freq_length = 10000;
        const int data_length = 200;
        public byte[] inputarr = new byte[400];
        double[] plot_array = new double[data_length];
        double[] digi_array = new double[data_length];
        double send_trigger_value = 0;
        char[] send_trigger_freq_array = new char[2];
        double incoming_rigger_value = 0;


        char[] temp = new char[3];
        int counter = 0;
        string str;
        double tempzed = 0;
        int array_counter = 0;
        int handshake = 1;

        int updates = 0; 

        int multiplier = 1;
        string selectedItem;

        string samp_freg = "10000";
        int samp_freq_int = 0;

        double time = 0;

        double array_max = 0;

        double array_min = 0;

        double[] dftreal = new double[freq_length];

        double[] dftimg = new double[freq_length];

        double x, y, z = 0;
        int step = 0;

        int data_check = 0;

        private Bluetooth_Settings _setting = new Bluetooth_Settings();
        public Form1() // load form one 
        {
            InitializeComponent();

        }


        bool ADC = true; 





        private void COMPortToolStripMenuItem_Click(object sender, EventArgs e) // used for setting up COM Port
        {
            _setting.Show(); // Show window
            _setting._serial.DataReceived += new SerialDataReceivedEventHandler(DataReceivedHandler);
        }


        private void DataReceivedHandler(object sender, SerialDataReceivedEventArgs e) // handler for new data recieved
        {
            SerialPort sp = (SerialPort)sender;

            if (sp.BytesToRead >= 400) // if bytes to read is equal to data length
            {

                    sp.Read(inputarr, 0, 400); // dump contents in buffer to input arr

                    for (int i = 0; i < data_length; i++) // convert from byte array to double array 
                    {
                        plot_array[i] = Convert.ToDouble(inputarr[i]); // convert from byte array to double array

                        plot_array[i] = plot_array[i] / 255 * 5; // convert from adc values to Voltages 
                    }

                    for (int i = data_length; i < 400; i++) // convert from byte array to double array 
                    {
                        digi_array[i - data_length] = Convert.ToDouble(inputarr[i]); // convert from byte array to double array

                        digi_array[i - data_length] = digi_array[i - data_length] / 255 * 5; // convert from adc values to Voltages 
                    }



                    array_max = Math.Round(plot_array.Max(), 2); // get the max data point in array
                    array_min = Math.Round(plot_array.Min(), 2); // get the min data point in array

                    incoming_rigger_value = plot_array[0]; // get trigger value from first element in the array

                    this.Invoke(new EventHandler(show_input_freq)); // invoke new thread to handle DFT 

                    this.Invoke(new EventHandler(plot_data)); // invoke new thread to handle data plottting

                sp.DiscardInBuffer();

            }

        }








        private void Form1_Load(object sender, EventArgs e) // Form 1 Load 
        {
            // Default text in text boxes
            textBox3.Text = "Sampling Freq = 10000 Hz"; 
            textBox4.Text = "Min = 0V";
            textBox5.Text = "Max = 0V";
            textBox6.Text = "P2P = 0V";
           
        }

        private void button17_Click(object sender, EventArgs e) // start button
        {
            char[] Sampling = new char[1];

            Sampling[0] = '+'; // send handshake signal to pic

            _setting._serial.Write(Sampling, 0, 1);

            handshake = 0;

            Sampling[0] = 'D'; // start timer in pic

            _setting._serial.Write(Sampling, 0, 1);

            ADC = true;
        }

        private void button18_Click(object sender, EventArgs e) // stop button 
        {
            
            char[] Sampling = new char[1];

            Sampling[0] = '*'; // stop timer

            _setting._serial.Write(Sampling, 0, 1);

            ADC = false;
        }


        private void cleargraph() // clear graph funtion
        {

            chart1.Series["Light"].Points.Clear(); // clear graph


            textBox1.Clear(); // clear textbox 



        }

        private void button2_Click(object sender, EventArgs e)
        {
            cleargraph(); // clear graph

            char[] Sampling = new char[1];

            Sampling[0] = '*'; // add B to one element array

            _setting._serial.Write(Sampling, 0, 1);



            ADC = false;
        }
        char[] send_samp_freq_array = new char[6];


        string trigger_value_str;
        double trigger_value_int;


        private void button1_Click(object sender, EventArgs e)
        {
            trigger_value_str = textBox2.Text; // take on value of textbox 2 
            trigger_value_int = double.Parse(trigger_value_str); // convert string to double

            char[] Sampling = new char[1];


            Sampling[0] = '*'; // stop timer 

            _setting._serial.Write(Sampling, 0, 1);


            Sampling[0] = '$'; // send trigger value flag

            _setting._serial.Write(Sampling, 0, 1);

            // do calcaulations to convert to correct tigger value 

            if (trigger_value_int == 0) { }

            else
                send_trigger_value = (trigger_value_int / 5) * 255;


            send_trigger_value = Convert.ToInt32(send_trigger_value); // convert to int


            send_trigger_freq_array = send_trigger_value.ToString().ToCharArray(); // convert to array

            int n = send_trigger_freq_array.Length; // get length of array



            _setting._serial.Write(send_trigger_freq_array, 0, n); // send trigger value to pic


            Sampling[0] = 'D'; // start timer

            _setting._serial.Write(Sampling, 0, 1);

            
            textBox2.Clear(); // clear text box 2; 
           
            ADC = true;

        }




        private void button4_Click(object sender, EventArgs e)
        {
            selectedItem = comboBox1.Items[comboBox1.SelectedIndex].ToString(); // take value from combobox


            switch (selectedItem) // case stament for the combo box
            {
                case "1x":
                    multiplier = 1;
                    break;

                case "2x":
                    multiplier = 2;
                    break;

                case "4x":
                    multiplier = 4;
                    break;

                case "8x":
                    multiplier = 8;
                    break;

                case "16x":
                    multiplier = 16;
                    break;

                case "32x":
                    multiplier = 32;
                    break;

                case "64x":
                    multiplier = 64;
                    break;

                case "100x":
                    multiplier = 100;
                    break;

                case "128x":
                    multiplier = 128;
                    break;

                default:
                    multiplier = 1;
                    break;
            }


            if (multiplier == 1) // if multiplier equals one show defualt Y axis
            {
                chart1.ChartAreas["ChartArea1"].AxisY.Maximum = 5; // 5V 

                chart1.ChartAreas["ChartArea1"].AxisY.Minimum = 0; // 0V

                chart1.Series["Light"].Points.DataBindY(plot_array); // plot data to array
                chart1.Series["Light2"].Points.DataBindY(digi_array);

            }

            else // if multipler is not one show custom Y axis bases on trigger value
            {
                chart1.ChartAreas["ChartArea1"].AxisY.Maximum = Math.Round(incoming_rigger_value + (incoming_rigger_value / multiplier), 2);

                chart1.ChartAreas["ChartArea1"].AxisY.Minimum = Math.Round(incoming_rigger_value - (incoming_rigger_value / multiplier), 2);

                chart1.Series["Light"].Points.DataBindY(plot_array); // plot data to array
                chart1.Series["Light2"].Points.DataBindY(digi_array);
            }

        }

        int send_samp_freq = 0;
        private void button3_Click(object sender, EventArgs e)
        {

            samp_freg = textBox1.Text; // take text from textbox1
            samp_freq_int = Int32.Parse(samp_freg);// convert string to int

            char[] Sampling = new char[1];


            Sampling[0] = '*'; // stop timer

            _setting._serial.Write(Sampling, 0, 1);



            Sampling[0] = '%'; // samp freq trigger

            _setting._serial.Write(Sampling, 0, 1);


            // do math to convert to correct samp freq input
            if (samp_freq_int == 0) { }

            else
                send_samp_freq = 16000000 / samp_freq_int;



            send_samp_freq_array = send_samp_freq.ToString().ToCharArray(); // convert to array

            int n = send_samp_freq_array.Length; // get length of array



            _setting._serial.Write(send_samp_freq_array, 0, n); // send the samp freq to pic 24 



            Sampling[0] = 'D'; // start timer 

            _setting._serial.Write(Sampling, 0, 1);

            int temp = Convert.ToInt32(samp_freg); // convert samp freq to int 


            textBox1.Clear(); // clear text box 


            var str = $"Sampling Freq = {samp_freg} Hz"; 
            textBox3.Text = str; // add sampling freq to textbox3

            ADC = true;
        }

        double o;
        double p;
        
        private void button5_Click(object sender, EventArgs e)
        {
            char[] Sampling = new char[1];

            Sampling[0] = 'L'; // send handshake signal to pic

            _setting._serial.Write(Sampling, 0, 1);

            Int16 [] Filter = new Int16 []

                {
                          -12,     -4,      5,     17,     31,     48,     65,     79,     86,
                           83,     64,     26,    -31,   -106,   -194,   -284,   -366,   -424,
                         -442,   -405,   -300,   -120,    139,    470,    862,   1295,   1744,
                         2182,   2578,   2904,   3137,   3257,   3257,   3137,   2904,   2578,
                         2182,   1744,   1295,    862,    470,    139,   -120,   -300,   -405,
                         -442,   -424,   -366,   -284,   -194,   -106,    -31,     26,     64,
                           83,     86,     79,     65,     48,     31,     17,      5,     -4,
                          -12
                 };

           
                 
            for (int i = 0; i < 64; i++)
            {
                
                byte[] result = BitConverter.GetBytes(Filter[i]);

                _setting._serial.Write(result, 0, 2);

                

            }


            Sampling[0] = 'D'; // send handshake signal to pic

            _setting._serial.Write(Sampling, 0, 1);

            // 50HZ AND 100HZ LPF FS 2000HZ  freq = 8000





        }

        private void button6_Click(object sender, EventArgs e)
        {

            char[] Sampling = new char[1];

            Sampling[0] = 'B'; // send handshake signal to pic

            _setting._serial.Write(Sampling, 0, 1);
        }

        private void show_input_freq(object sender, EventArgs e) // DFT Algorithm 
        {

            int n = plot_array.Length;
            int m = n;// I use m = n / 2d;
            double[] real = new double[n];
            double[] imag = new double[n];
            double[] result = new double[m / 2];
            double pi_div = 2.0 * Math.PI / n;
            for (int w = 3; w < (m + 1) / 2; w++)
            {
                double a = w * pi_div;
                for (int t = 3; t < (n + 1) / 2; t++)
                {
                    real[w] += plot_array[t] * Math.Cos(a * t);
                    imag[w] += plot_array[t] * Math.Sin(a * t);
                }
                result[w] = Math.Sqrt(real[w] * real[w] + imag[w] * imag[w]) / n;
            }

            chart2.Series["Light"].Points.DataBindY(result); // plot the results of DFT to chart 2 

            o = result.Max(); // hold the max value in the result array
            p = Array.IndexOf(result, o); // get the index of the array that holds the max value

            textBox7.Text = "Input Freq = " + Math.Round(Convert.ToInt32(samp_freg) / data_length * p, 2) + "Hz"; // display input freq in toxbox 7

        }






        private void plot_data(object sender, EventArgs e) // plots data on mschart
        {
            updates += 1;
            textBox8.Text = updates.ToString();
            if (ADC == true) // if chart is not cleared 
            {
                // Add lables to X and Y axis
                chart1.ChartAreas["ChartArea1"].AxisY.Title = "Volts (V)"; 
                chart1.ChartAreas["ChartArea1"].AxisX.Title = "Time (s)";

                if (multiplier == 1) // if multiplier is 1 
                {

                    //Show default  Y axis 
                    chart1.ChartAreas["ChartArea1"].AxisY.Maximum = 5; //incoming_rigger_value + (incoming_rigger_value / multiplier);

                    chart1.ChartAreas["ChartArea1"].AxisY.Minimum = 0; //incoming_rigger_value - (incoming_rigger_value / multiplier);

                    chart1.Series["Light"].Points.DataBindY(plot_array); // plot data on chart
                    chart1.Series["Light2"].Points.DataBindY(digi_array);

                }

                else // if multiplier is not 1 
                {
                    // show custom Y axis values 
                    chart1.ChartAreas["ChartArea1"].AxisY.Maximum = Math.Round(incoming_rigger_value + (incoming_rigger_value / multiplier), 2);

                    chart1.ChartAreas["ChartArea1"].AxisY.Minimum = Math.Round(incoming_rigger_value - (incoming_rigger_value / multiplier), 2);

                    chart1.Series["Light"].Points.DataBindY(plot_array); // plot data on chart
                    chart1.Series["Light2"].Points.DataBindY(digi_array);
                }



                chart1.ChartAreas["ChartArea1"].AxisX.Interval = 50; // have x axis interval of 50 

                time = 1 / Convert.ToDouble(samp_freg); // convert from freq to time

                string first, second, third, fourth;

                // calcaulting time values for the 4 x axis segments in charts
                first = (50 * time).ToString();
                second = (100 * time).ToString();
                third = (150 * time).ToString();
                fourth = (200 * time).ToString();

                chart1.Series["Light"].IsVisibleInLegend = false;// remoove the default x axis labels
                chart1.Series["Light2"].IsVisibleInLegend = false;// remoove the default x axis labels
                chart1.ChartAreas["ChartArea1"].AxisX.CustomLabels.Clear(); // clear the previous labels 

                // add the x axis time labels 
                chart1.ChartAreas["ChartArea1"].AxisX.CustomLabels.Add(25, 75, first + "s");
                chart1.ChartAreas["ChartArea1"].AxisX.CustomLabels.Add(75, 125, second + "s");
                chart1.ChartAreas["ChartArea1"].AxisX.CustomLabels.Add(125, 175, third + "s");
                chart1.ChartAreas["ChartArea1"].AxisX.CustomLabels.Add(175, 225, fourth + "s");


                textBox4.Text = "Min = " + array_min + "V"; // show min voltage on textbox 4

                textBox5.Text = "Max = " + array_max + "V"; // show max voltage on textbox 5 

                textBox6.Text = "P2P = " + (array_min + array_max) + "V"; // Show P2P on textbox6


                char[] Sampling = new char[1];

                Sampling[0] = '+'; // send handshake to pic

                _setting._serial.Write(Sampling, 0, 1);

                handshake = 0;

            }




        }

    }
}

