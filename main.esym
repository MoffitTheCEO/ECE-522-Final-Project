D G "__PCD__" 0 274 ""5.008""
D G "__DEVICE__" 0 274 "8206"
D G "__DATE__" 0 274 ""25-Oct-22""
D G "__TIME__" 0 274 ""21:59:36""
D G "MAIN_H" 1 2 ""
c L "set_tris_a" 2 1 21 "FUNCTION"
v L "value" 2 39 "int16" `53 
f B "set_tris_a" 2 39 "void(int16 value)" `52 
v L "value" 2 40 "int16" `55 
f B "set_tris_b" 2 40 "void(int16 value)" `54 
f B "get_tris_a" 2 41 "int16()" `56 
f B "get_tris_b" 2 42 "int16()" `57 
v L "value" 2 43 "int16" `59 
f B "output_a" 2 43 "void(int16 value)" `58 
v L "value" 2 44 "int16" `61 
f B "output_b" 2 44 "void(int16 value)" `60 
f B "input_a" 2 45 "int16()" `62 
f B "input_b" 2 46 "int16()" `63 
f B "input_change_a" 2 47 "int8()" `64 
f B "input_change_b" 2 48 "int8()" `65 
v L "state" 2 49 "int8" `67 
f B "set_pullup" 2 49 "void(int8 state)" `66 
v L "state" 2 50 "int8" `69 
v L "pin" 2 50 "int16" `70 
f G "set_pullup" 2 50 "void(int8 state,int16 pin)" `68 
v L "state" 2 51 "int8" `72 
f B "set_pulldown" 2 51 "void(int8 state)" `71 
v L "state" 2 52 "int8" `74 
v L "pin" 2 52 "int16" `75 
f G "set_pulldown" 2 52 "void(int8 state,int16 pin)" `73 
v L "pin" 2 53 "int16" `77 
f B "input" 2 53 "int8(int16 pin)" `76 
v L "pin" 2 54 "int16" `79 
f B "input_state" 2 54 "int8(int16 pin)" `78 
v L "pin" 2 55 "int16" `81 
f B "output_low" 2 55 "void(int16 pin)" `80 
v L "pin" 2 56 "int16" `83 
f B "output_high" 2 56 "void(int16 pin)" `82 
v L "pin" 2 57 "int16" `85 
f B "output_toggle" 2 57 "void(int16 pin)" `84 
v L "pin" 2 58 "int16" `87 
v L "level" 2 58 "int8" `88 
f B "output_bit" 2 58 "void(int16 pin,int8 level)" `86 
v L "pin" 2 59 "int16" `90 
f B "output_float" 2 59 "void(int16 pin)" `89 
v L "pin" 2 60 "int16" `92 
f B "output_drive" 2 60 "void(int16 pin)" `91  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 63 "5648"
d G "PIN_A1" 2 64 "5649"
d G "PIN_A2" 2 65 "5650"
d G "PIN_A3" 2 66 "5651"
d G "PIN_A4" 2 67 "5652"
d G "PIN_B0" 2 69 "5712"
d G "PIN_B1" 2 70 "5713"
d G "PIN_B2" 2 71 "5714"
d G "PIN_B3" 2 72 "5715"
d G "PIN_B4" 2 73 "5716"
d G "PIN_B5" 2 74 "5717"
d G "PIN_B6" 2 75 "5718"
d G "PIN_B7" 2 76 "5719"
d G "PIN_B8" 2 77 "5720"
d G "PIN_B9" 2 78 "5721"
d G "PIN_B10" 2 79 "5722"
d G "PIN_B11" 2 80 "5723"
d G "PIN_B12" 2 81 "5724"
d G "PIN_B13" 2 82 "5725"
d G "PIN_B14" 2 83 "5726"
d G "PIN_B15" 2 84 "5727"
d G "FALSE" 2 87 "0"
d G "TRUE" 2 88 "1"
d G "BYTE" 2 90 "unsigned int8"
d G "BOOLEAN" 2 91 "int1"
d G "getc" 2 93 "getch"
d G "fgetc" 2 94 "getch"
d G "getchar" 2 95 "getch"
d G "putc" 2 96 "putchar"
d G "fputc" 2 97 "putchar"
d G "fgets" 2 98 "gets"
d G "fputs" 2 99 "puts"
c L "output_drive" 2 1 2 "FUNCTION"
v L "baud" 2 103 "int32" `94 
f B "setup_uart" 2 103 "void(int32 baud)" `93 
v L "baud" 2 104 "int32" `96 
v L "stream" 2 104 "int8" `97 
f G "setup_uart" 2 104 "void(int32 baud,int8 stream)" `95 
v L "baud" 2 105 "int32" `99 
v L "stream" 2 105 "int8" `100 
v L "clock" 2 105 "int32" `101 
f G "setup_uart" 2 105 "void(int32 baud,int8 stream,int32 clock)" `98 
v L "baud" 2 106 "int32" `103 
f B "set_uart_speed" 2 106 "void(int32 baud)" `102 
v L "baud" 2 107 "int32" `105 
v L "stream" 2 107 "int8" `106 
f G "set_uart_speed" 2 107 "void(int32 baud,int8 stream)" `104 
v L "baud" 2 108 "int32" `108 
v L "stream" 2 108 "int8" `109 
v L "clock" 2 108 "int32" `110 
f G "set_uart_speed" 2 108 "void(int32 baud,int8 stream,int32 clock)" `107  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 112 "2"
d G "UART_DATA" 2 113 "4"
d G "UART_AUTODETECT" 2 114 "8"
d G "UART_AUTODETECT_NOWAIT" 2 115 "9"
d G "UART_WAKEUP_ON_RDA" 2 116 "10"
d G "UART_SEND_BREAK" 2 117 "13"
c L "set_uart_speed" 2 1 3 "FUNCTION"
v L "mode" 2 122 "int8" `112 
f B "setup_wdt" 2 122 "void(int8 mode)" `111 
f B "restart_wdt" 2 123 "void()" `113  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 125 "1"
d G "WDT_OFF" 2 126 "0"
d G "WDT_1MS" 2 128 "0x002"
d G "WDT_2MS" 2 129 "0x003"
d G "WDT_4MS" 2 130 "0x004"
d G "WDT_8MS" 2 131 "0x005"
d G "WDT_16MS" 2 132 "0x006"
d G "WDT_32MS" 2 133 "0x007"
d G "WDT_64MS" 2 134 "0x008"
d G "WDT_128MS" 2 135 "0x009"
d G "WDT_256MS" 2 136 "0x00A"
d G "WDT_512MS" 2 137 "0x00B"
d G "WDT_1S" 2 138 "0x00C"
d G "WDT_2S" 2 139 "0x00D"
d G "WDT_4S" 2 140 "0x00E"
d G "WDT_8S" 2 141 "0x00F"
d G "WDT_16S" 2 142 "0x010"
d G "WDT_33S" 2 143 "0x011"
d G "WDT_65S" 2 144 "0x030"
d G "WDT_131S" 2 145 "0x031"
c L "restart_wdt" 2 1 3 "FUNCTION"
f B "restart_cause" 2 150 "int8()" `114 
f B "reset_cpu" 2 151 "void()" `115 
f B "sleep" 2 152 "void()" `116 
v L "mode" 2 153 "int8" `118 
f G "sleep" 2 153 "void(int8 mode)" `117  "Constants passed into RESTART_CAUSE() are:"
d G "RESTART_POWER_UP" 2 155 "0"
d G "RESTART_BROWNOUT" 2 156 "1"
d G "RESTART_WATCHDOG" 2 157 "4"
d G "RESTART_SOFTWARE" 2 158 "6"
d G "RESTART_MCLR" 2 159 "7"
d G "RESTART_ILLEGAL_OP" 2 160 "14"
d G "RESTART_TRAP_CONFLICT" 2 161 "15"
d G "SLEEP_FULL" 2 164 "0" "Default"
d G "SLEEP_IDLE" 2 165 "1" "Clock and peripherals don't stop"
c L "sleep" 2 1 2 "FUNCTION"
v L "type" 2 169 "int8" `120 
v L "target" 2 169 "int32" `121 
f B "setup_oscillator" 2 169 "void(int8 type,int32 target)" `119 
v L "type" 2 170 "int8" `123 
v L "target" 2 170 "int32" `124 
v L "source" 2 170 "int32" `125 
f G "setup_oscillator" 2 170 "void(int8 type,int32 target,int32 source)" `122  "Constants used in setup_oscillator() are:"
d G "OSC_INTERNAL" 2 172 "32"
d G "OSC_CRYSTAL" 2 173 "1"
d G "OSC_CLOCK" 2 174 "2"
d G "OSC_RC" 2 175 "3"
d G "OSC_SECONDARY" 2 176 "16"
c L "setup_oscillator" 2 1 4 "FUNCTION"
v L "mode" 2 182 "int16" `127 
f B "setup_timer1" 2 182 "void(int16 mode)" `126 
v L "mode" 2 183 "int16" `129 
v L "period" 2 183 "int16" `130 
f G "setup_timer1" 2 183 "void(int16 mode,int16 period)" `128 
f B "get_timer1" 2 184 "int16()" `131 
v L "value" 2 185 "int16" `133 
f B "set_timer1" 2 185 "void(int16 value)" `132 
v L "mode" 2 186 "int16" `135 
f B "setup_timer2" 2 186 "void(int16 mode)" `134 
v L "mode" 2 187 "int16" `137 
v L "period" 2 187 "int16" `138 
f G "setup_timer2" 2 187 "void(int16 mode,int16 period)" `136 
f B "get_timer2" 2 188 "int16()" `139 
v L "value" 2 189 "int16" `141 
f B "set_timer2" 2 189 "void(int16 value)" `140 
v L "mode" 2 190 "int16" `143 
f B "setup_timer3" 2 190 "void(int16 mode)" `142 
v L "mode" 2 191 "int16" `145 
v L "period" 2 191 "int16" `146 
f G "setup_timer3" 2 191 "void(int16 mode,int16 period)" `144 
f B "get_timer3" 2 192 "int16()" `147 
v L "value" 2 193 "int16" `149 
f B "set_timer3" 2 193 "void(int16 value)" `148 
f B "get_timer23" 2 194 "int32()" `150 
v L "value" 2 195 "int32" `152 
f B "set_timer23" 2 195 "void(int32 value)" `151 
v L "mode" 2 196 "int16" `154 
f B "setup_timer4" 2 196 "void(int16 mode)" `153 
v L "mode" 2 197 "int16" `156 
v L "period" 2 197 "int16" `157 
f G "setup_timer4" 2 197 "void(int16 mode,int16 period)" `155 
f B "get_timer4" 2 198 "int16()" `158 
v L "value" 2 199 "int16" `160 
f B "set_timer4" 2 199 "void(int16 value)" `159 
v L "mode" 2 200 "int16" `162 
f B "setup_timer5" 2 200 "void(int16 mode)" `161 
v L "mode" 2 201 "int16" `164 
v L "period" 2 201 "int16" `165 
f G "setup_timer5" 2 201 "void(int16 mode,int16 period)" `163 
f B "get_timer5" 2 202 "int16()" `166 
v L "value" 2 203 "int16" `168 
f B "set_timer5" 2 203 "void(int16 value)" `167 
f B "get_timer45" 2 204 "int32()" `169 
v L "value" 2 205 "int32" `171 
f B "set_timer45" 2 205 "void(int32 value)" `170  "Constants used for SETUP_TIMERx() are:"
d G "TMR_DISABLED" 2 208 "0x0000"
d G "TMR_INTERNAL" 2 209 "0x8000"
d G "TMR_EXTERNAL" 2 210 "0x8002"
d G "TMR_GATE" 2 211 "0x0040"
d G "TMR_DIV_BY_1" 2 213 "0x0000"
d G "TMR_DIV_BY_8" 2 214 "0x0010"
d G "TMR_DIV_BY_64" 2 215 "0x0020"
d G "TMR_DIV_BY_256" 2 216 "0x0030"
d G "TMR_32_BIT" 2 217 "0x0008" "Only for even numbered timers"
d G "TMR_HALT_IDLE" 2 219 "0x2000"
d G "TMR_CONTINUE_IDLE" 2 220 "0x0000"
d G "T1_EXTERNAL_SYNC" 2 222 "0x8006" "This only applies to Timer1"
d G "T1_EXTERNAL_RTC" 2 223 "0xC002" "This only applies to Timer1"
c L "set_timer45" 2 1 3 "FUNCTION"
v L "module" 2 227 "int8" `173 
v L "mode" 2 227 "int16" `174 
f B "setup_capture" 2 227 "void(int8 module,int16 mode)" `172 
v L "module" 2 228 "int8" `176 
f B "get_capture" 2 228 "int16(int8 module)" `175 
v L "module" 2 229 "int8" `178 
v L "wait" 2 229 "int8" `179 
f G "get_capture" 2 229 "int16(int8 module,int8 wait)" `177  "Constants used for SETUP_CAPTURE() are:"
d G "CAPTURE_OFF" 2 231 "0x0000" "Capture OFF"
d G "CAPTURE_EE" 2 232 "0x0001" "Capture Every Edge"
d G "CAPTURE_FE" 2 233 "0x0002" "Capture Falling Edge"
d G "CAPTURE_RE" 2 234 "0x0003" "Capture Rising Edge"
d G "CAPTURE_DIV_4" 2 235 "0x0004" "Capture Every 4th Rising Edge"
d G "CAPTURE_DIV_16" 2 236 "0x0005" "Capture Every 16th Rising Edge"
d G "CAPTURE_INTERRUPT_ONLY" 2 237 "0x0007" "Interrupt on Rising Edge when in Sleep or Idle"
d G "INTERRUPT_EVERY_CAPTURE" 2 240 "0x0000" "Interrupt on every capture event"
d G "INTERRUPT_SECOND_CAPTURE" 2 241 "0x0020" "Interrupt on every second capture event"
d G "INTERRUPT_THIRD_CAPTURE" 2 242 "0x0040" "Interrupt on every third capture event"
d G "INTERRUPT_FOURTH_CAPTURE" 2 243 "0x0060" "Interrupt on every fourth capture event"
d G "CAPTURE_TIMER2" 2 246 "0x0080" "On capture event Timer 2 is captured"
d G "CAPTURE_TIMER3" 2 247 "0x0000" "On capture event Timer 3 is captured"
d G "CAPTURE_HALT_IDLE" 2 250 "0x2000" "Capture module halts during idle mode"
d G "CAPTURE_CONTINUE_IDLE" 2 251 "0x0000" "Capture module continues during idle mode"
c L "get_capture" 2 1 3 "FUNCTION"
v L "module" 2 256 "int8" `181 
v L "mode" 2 256 "int16" `182 
f B "setup_compare" 2 256 "void(int8 module,int16 mode)" `180 
v L "module" 2 257 "int8" `184 
v L "duty" 2 257 "int16" `185 
f B "set_pwm_duty" 2 257 "void(int8 module,int16 duty)" `183 
v L "module" 2 258 "int8" `187 
v L "ocr" 2 258 "int16" `188 
f B "set_compare_time" 2 258 "void(int8 module,int16 ocr)" `186 
v L "module" 2 259 "int8" `190 
v L "ocr" 2 259 "int16" `191 
v L "ocrs" 2 259 "int16" `192 
f G "set_compare_time" 2 259 "void(int8 module,int16 ocr,int16 ocrs)" `189  "Constants used for SETUP_COMPARE() are:"
d G "COMPARE_OFF" 2 261 "0x0000" "Compare OFF"
d G "COMPARE_SET_ON_MATCH" 2 262 "0x0001" "Pin from low to high on match"
d G "COMPARE_CLR_ON_MATCH" 2 263 "0x0002" "Pin from high to low on match"
d G "COMPARE_TOGGEL" 2 264 "0x0003" "Pin will toggle on every match occurrence"
d G "COMPARE_SINGLE_PULSE" 2 265 "0x0004" "Pin will generate single pulse on first match"
d G "COMPARE_CONT_PULSE" 2 266 "0x0005" "Pin will pulse for every match"
d G "COMPARE_PWM" 2 267 "0x0006" "Compare operates as PWM with fault pin disabled"
d G "COMPARE_PWM_FAULT" 2 268 "0x0007" "Compare operates as PWM with fault pin enabled"
d G "COMPARE_TIMER2" 2 271 "0x0000" "Timer 2 is the base timer"
d G "COMPARE_TIMER3" 2 272 "0x0008" "Timer 3 is the base timer"
d G "COMPARE_HALT_IDLE" 2 275 "0x2000" "Compare module halts during idle mode"
d G "COMPARE_CONTINUE_IDLE" 2 276 "0x0000" "Compare module continues during idle mode"
c L "set_compare_time" 2 1 3 "FUNCTION"
v L "mode" 2 281 "int16" `194 
f B "setup_spi" 2 281 "void(int16 mode)" `193 
v L "data" 2 282 "int8" `196 
f B "spi_write" 2 282 "void(int8 data)" `195 
f B "spi_read" 2 283 "int8()" `197 
v L "data" 2 284 "int8" `199 
f G "spi_read" 2 284 "int8(int8 data)" `198 
f B "spi_data_in" 2 285 "int8()" `200 
v L "mode" 2 286 "int16" `202 
f B "setup_spi2" 2 286 "void(int16 mode)" `201 
v L "data" 2 287 "int8" `204 
f B "spi_write2" 2 287 "void(int8 data)" `203 
f B "spi_read2" 2 288 "int8()" `205 
v L "data" 2 289 "int8" `207 
f G "spi_read2" 2 289 "int8(int8 data)" `206 
f B "spi_data_in2" 2 290 "int8()" `208  "Constants used in SETUP_SPI() are:"
d G "SPI_MASTER" 2 293 "0x0020"
d G "SPI_SLAVE" 2 294 "0x0000"
d G "SPI_SCK_IDLE_HIGH" 2 296 "0x0040"
d G "SPI_SCK_IDLE_LOW" 2 297 "0x0000"
d G "SPI_XMIT_L_TO_H" 2 299 "0x0100"
d G "SPI_XMIT_H_TO_L" 2 300 "0x0000"
d G "SPI_MODE_16B" 2 302 "0x0400"
d G "SPI_MODE_8B" 2 303 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 305 "0x0200"
d G "SPI_SAMPLE_AT_MIDDLE" 2 306 "0x0000"
d G "SPI_SS_ENABLED" 2 308 "0x0000"
d G "SPI_SS_DISABLED" 2 309 "0x0080"
d G "SPI_CLK_DIV_1" 2 312 "0x001F"
d G "SPI_CLK_DIV_2" 2 313 "0x001B"
d G "SPI_CLK_DIV_3" 2 314 "0x0017"
d G "SPI_CLK_DIV_4" 2 315 "0x001E"
d G "SPI_CLK_DIV_5" 2 316 "0x000F"
d G "SPI_CLK_DIV_6" 2 317 "0x000B"
d G "SPI_CLK_DIV_7" 2 318 "0x0007"
d G "SPI_CLK_DIV_8" 2 319 "0x0003"
d G "SPI_CLK_DIV_12" 2 320 "0x0016"
d G "SPI_CLK_DIV_16" 2 321 "0x001D"
d G "SPI_CLK_DIV_20" 2 322 "0x000E"
d G "SPI_CLK_DIV_24" 2 323 "0x000A"
d G "SPI_CLK_DIV_28" 2 324 "0x0006"
d G "SPI_CLK_DIV_32" 2 325 "0x0002"
d G "SPI_CLK_DIV_48" 2 326 "0x0015"
d G "SPI_CLK_DIV_64" 2 327 "0x001C"
d G "SPI_CLK_DIV_80" 2 328 "0x000D"
d G "SPI_CLK_DIV_96" 2 329 "0x0009"
d G "SPI_CLK_DIV_112" 2 330 "0x0005"
d G "SPI_CLK_DIV_128" 2 331 "0x0001"
d G "SPI_CLK_DIV_192" 2 332 "0x0014"
d G "SPI_CLK_DIV_256" 2 333 "0x0010"
d G "SPI_CLK_DIV_320" 2 334 "0x000C"
d G "SPI_CLK_DIV_384" 2 335 "0x0008"
d G "SPI_CLK_DIV_448" 2 336 "0x0004"
d G "SPI_CLK_DIV_512" 2 337 "0x0000"
d G "SPI_L_TO_H" 2 340 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 341 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in2" 2 1 4 "FUNCTION"
v L "mode" 2 347 "int32" `210 
f B "setup_adc" 2 347 "void(int32 mode)" `209 
v L "pins" 2 348 "int32" `212 
f B "setup_adc_ports" 2 348 "void(int32 pins)" `211 
v L "pins" 2 349 "int32" `214 
v L "reference" 2 349 "int16" `215 
f G "setup_adc_ports" 2 349 "void(int32 pins,int16 reference)" `213 
v L "??65535" 2 350 "int8" `217 
f B "set_adc_channel" 2 350 "void(int8 )" `216 
f B "read_adc" 2 351 "int16()" `218 
v L "mode" 2 352 "int8" `220 
f G "read_adc" 2 352 "int16(int8 mode)" `219 
f B "adc_done" 2 353 "int8()" `221  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 357 "0x10000"
d G "ADC_CLOCK" 2 358 "0x0000"
d G "ADC_CLOCK_DIV_2" 2 359 "0x0001"
d G "ADC_CLOCK_DIV_4" 2 360 "0x0003"
d G "ADC_CLOCK_DIV_8" 2 361 "0x0007"
d G "ADC_CLOCK_DIV_16" 2 362 "0x000F"
d G "ADC_CLOCK_DIV_32" 2 363 "0x001F"
d G "ADC_CLOCK_DIV_64" 2 364 "0x003F"
d G "ADC_CLOCK_INTERNAL" 2 365 "0x8000" "Internal"
d G "ADC_TAD_MUL_0" 2 369 "0x1F00"
d G "ADC_TAD_MUL_2" 2 370 "0x1D00"
d G "ADC_TAD_MUL_4" 2 371 "0x1B00"
d G "ADC_TAD_MUL_8" 2 372 "0x1700"
d G "ADC_TAD_MUL_16" 2 373 "0x0F00"
d G "ADC_TAD_MUL_31" 2 374 "0x0000"
d G "ADC_START_AND_READ" 2 377 "0x07"
d G "ADC_START_ONLY" 2 378 "0x01"
d G "ADC_READ_ONLY" 2 379 "0x06"
d G "NO_ANALOGS" 2 384 "0" "None"
d G "ALL_ANALOG" 2 385 "0xFFFFFFFF" "All"
d G "sAN0" 2 386 "0x00000001" "| A0"
d G "sAN1" 2 387 "0x00000002" "| A1"
d G "sAN2" 2 388 "0x00000004" "| B0"
d G "sAN3" 2 389 "0x00000008" "| B1"
d G "sAN4" 2 390 "0x00000010" "| B2"
d G "sAN5" 2 391 "0x00000020" "| B3"
d G "VSS_VDD" 2 394 "0x0000" "Range 0-Vdd"
d G "VREF_VREF" 2 395 "0x6000" "Range VrefL-VrefH"
d G "VREF_VDD" 2 396 "0x4000" "Range VrefL-Vdd"
d G "VSS_VREF" 2 397 "0x2000" "Range 0-VrefH"
c L "adc_done" 2 1 4 "FUNCTION"
v L "mode" 2 403 "int16" `223 
f B "setup_comparator" 2 403 "void(int16 mode)" `222  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 2 405 "0x00"
d G "A4_A5_NC_NC" 2 406 "0x201"
d G "A4_VR_NC_NC" 2 407 "0x200"
d G "A5_VR_NC_NC" 2 408 "0x202"
d G "NC_NC_A2_A3" 2 409 "0x804"
d G "NC_NC_A2_VR" 2 410 "0x800"
d G "NC_NC_A3_VR" 2 411 "0x808"
d G "A4_A5_A2_A3" 2 412 "A4_A5_NC_NC | NC_NC_A2_A3"
d G "A4_VR_A2_VR" 2 413 "A4_VR_NC_NC | NC_NC_A2_VR"
d G "A5_VR_A3_VR" 2 414 "A5_VR_NC_NC |  NC_NC_A3_VR"
d G "C1_INVERT" 2 416 "0x10"
d G "C2_INVERT" 2 417 "0x20"
d G "C1_OUTPUT" 2 418 "0x40"
d G "C2_OUTPUT" 2 419 "0x80"
c L "setup_comparator" 2 1 4 "FUNCTION"
v L "mode" 2 426 "int16" `225 
f B "setup_vref" 2 426 "void(int16 mode)" `224  "Constants used in setup_vref() are:"
d G "VREF_DISABLED" 2 428 "0x0000"
d G "VREF_VSS_VDD" 2 429 "0x0080"
d G "VREF_ANALOG" 2 430 "0x0090"
d G "VREF_HIGH" 2 432 "0x0080"
d G "VREF_LOW" 2 433 "0x00A0"
d G "VREF_OUTPUT" 2 435 "0x0040"
c L "setup_vref" 2 1 7 "FUNCTION"
v L "mode" 2 444 "int32" `227 
v L "address_mask" 2 444 "int16" `228 
f B "setup_pmp" 2 444 "void(int32 mode,int16 address_mask)" `226 
v L "address" 2 445 "int16" `230 
f B "pmp_address" 2 445 "void(int16 address)" `229 
f B "pmp_read" 2 446 "int8()" `231 
v L "data" 2 447 "int8" `233 
f B "pmp_write" 2 447 "void(int8 data)" `232 
f B "pmp_output_full" 2 448 "int8()" `234 
f B "pmp_input_full" 2 449 "int8()" `235 
f B "pmp_overflow" 2 450 "int8()" `236 
v L "mode" 2 451 "int32" `238 
v L "address_mask" 2 451 "int16" `239 
f B "setup_psp" 2 451 "void(int32 mode,int16 address_mask)" `237 
f B "psp_read" 2 452 "int8()" `240 
v L "address" 2 453 "int16" `242 
f G "psp_read" 2 453 "int8(int16 address)" `241 
v L "data" 2 454 "int8" `244 
f B "psp_write" 2 454 "void(int8 data)" `243 
v L "data" 2 455 "int8" `246 
v L "address" 2 455 "int16" `247 
f G "psp_write" 2 455 "void(int8 data,int16 address)" `245 
f B "psp_output_full" 2 456 "int8()" `248 
f B "psp_input_full" 2 457 "int8()" `249 
f B "psp_overflow" 2 458 "int8()" `250  "Constants used in SETUP_PMP() and SETUP_PSP() are:"
d G "PAR_ENABLE" 2 460 "0x8000"
d G "PAR_DISABLE" 2 461 "0x0000" "Module enable/disable options"
d G "PAR_STOP_IN_IDLE" 2 462 "0x2000"
d G "PAR_CONTINUE_IN_IDLE" 2 463 "0x0000"
d G "PAR_ADDR_NOT_MULTIPLEXED" 2 464 "0x0000" "Address multiplexing options"
d G "PAR_LOW_ADDR_MULTIPLEXED" 2 465 "0x0800" "Address multiplexing options"
d G "PAR_FULL_ADDR_MULTIPLEXED" 2 466 "0x1000" "Address multiplexing options"
d G "PAR_PTBEEN_ENABLE" 2 467 "0x0400" "Byte Enable Port Enable bit"
d G "PAR_PTWREN_ENABLE" 2 468 "0x0200" "Write Enable Strobe bit"
d G "PAR_PTRDEN_ENABLE" 2 469 "0x0100" "Read/Write Strobe Port bit"
d G "PAR_ALP_ACTIVE_HIGH" 2 470 "0x0020" "Address latch polarity high"
d G "PAR_BEP_ACTIVE_HIGH" 2 471 "0x0004" "Byte Enable Polarity"
d G "PAR_WRSP_ACTIVE_HIGH" 2 472 "0x0002" "Write strobe Polarity bit"
d G "PAR_RDSP_ACTIVE_HIGH" 2 473 "0x0001" "Read strobe Polarity bit"
d G "PAR_CS_XX" 2 474 "0x0000" "Chip select pins used for address"
d G "PAR_CS_X1" 2 475 "0x0008" "Chip select pin 1 used, active high"
d G "PAR_CS_X0" 2 476 "0x0000" "Chip select pin 1 used, active low"
d G "PAR_CS_1X" 2 477 "0x0050" "Chip select pin 2 used, active high"
d G "PAR_CS_0X" 2 478 "0x0040" "Chip select pin 2 used, active low"
d G "PAR_CS_00" 2 479 "0x0080" "Chip select pins 1,2 used, active low"
d G "PAR_CS_11" 2 480 "0x0098" "Chip select pins 1,2 used, active high"
d G "PAR_CS_10" 2 481 "0x0090" "Chip select pins 1,2 used, 1 is active low, 2 is high"
d G "PAR_CS_01" 2 482 "0x0088" "Chip select pins 1,2 used, 1 is active high, 2 is low"
d G "PAR_INTR_ON_RW" 2 483 "0x20000000" "Interrupt on read write"
d G "PAR_NO_INTR_STALL_ACTIVATED" 2 484 "0x40000000" "No interrupt, processor stall activated"
d G "PAR_INTR_ON_3_RW_BUF" 2 485 "0x60000000" "Interrupt on write to Buffer 3 or read from Buffer 3"
d G "PAR_PSP_AUTO_INC" 2 486 "0x18000000" "Read write buffers auto increment"
d G "PAR_DEC_ADDR" 2 487 "0x10000000" "Increment the address"
d G "PAR_INC_ADDR" 2 488 "0x08000000" "Decrement the address"
d G "PAR_MASTER_MODE_1" 2 489 "0x03000000" "Master mode 1"
d G "PAR_MASTER_MODE_2" 2 490 "0x02000000" "Master mode 2"
d G "PAR_WAITB1" 2 491 "0x00000000" "1 Tcy Wait state for data setup R/W"
d G "PAR_WAITB2" 2 492 "0x00400000" "2 Tcy Wait state for data setup R/W"
d G "PAR_WAITB3" 2 493 "0x00800000" "3 Tcy Wait state for data setup R/W"
d G "PAR_WAITB4" 2 494 "0x00C00000" "4 Tcy Wait state for data setup R/W"
d G "PAR_WAITM0" 2 495 "0x00000000" "0 wait state for Read to byte"
d G "PAR_WAITM1" 2 496 "0x00040000" "1 Tcy wait state for Read to byte"
d G "PAR_WAITM2" 2 497 "0x00080000" "2 Tcy wait state for Read to byte"
d G "PAR_WAITM3" 2 498 "0x000C0000" "3 Tcy wait state for Read to byte"
d G "PAR_WAITM15" 2 499 "0x003C0000" "15 wait states"
d G "PAR_WAITE1" 2 500 "0x00000000" "1 Tcy Wait for data hold after strobe"
d G "PAR_WAITE2" 2 501 "0x00010000" "2 Tcy Wait for data hold after strobe"
d G "PAR_WAITE3" 2 502 "0x00020000" "3 Tcy Wait for data hold after strobe"
d G "PAR_WAITE4" 2 503 "0x00030000" "4 Tcy Wait for data hold after strobe"
c L "psp_overflow" 2 1 3 "FUNCTION"
v L "poly_terms" 2 508 "int8" `252 
f B "setup_crc" 2 508 "void(int8 poly_terms,*int8 _VA_LIST)" `251 
v L "value" 2 509 "int16" `255 
f B "crc_init" 2 509 "void(int16 value)" `254 
v L "data" 2 510 "int16" `257 
f B "crc_calc" 2 510 "int16(int16 data)" `256 
v L "ptr" 2 511 "*int16" `259 
v L "count" 2 511 "int16" `260 
f G "crc_calc" 2 511 "int16(*int16 ptr,int16 count)" `258 
v L "data" 2 512 "int8" `262 
f B "crc_calc8" 2 512 "int8(int8 data)" `261 
v L "ptr" 2 513 "*int8" `264 
v L "count" 2 513 "int16" `265 
f G "crc_calc8" 2 513 "int8(*int8 ptr,int16 count)" `263  "RTC"
c L "crc_calc8" 2 1 3 "FUNCTION"
c L "crc_calc8" 2 1 1 "FUNCTION"
c L "crc_calc8" 2 1 1 "FUNCTION"
t G "rtc_time_t" 2 529 "{int8 tm_year,int8 tm_temp,int8 tm_mday,int8 tm_mon,int8 tm_hour,int8 tm_wday,int8 tm_sec,int8 tm_min,int8 tm_isdst}" `276  "RTC Protoyptes:"
v L "mode" 2 531 "int16" `278 
v L "calibration" 2 531 "int8" `279 
f B "setup_rtc" 2 531 "void(int16 mode,int8 calibration)" `277 
v L "mode" 2 532 "int16" `281 
v L "mask" 2 532 "int16" `282 
v L "repeat" 2 532 "int8" `283 
f B "setup_rtc_alarm" 2 532 "void(int16 mode,int16 mask,int8 repeat)" `280 
v L "time" 2 533 "*rtc_time_t" `285 
f B "rtc_read" 2 533 "void(*rtc_time_t time)" `284 
v L "time" 2 534 "*rtc_time_t" `287 
f B "rtc_write" 2 534 "void(*rtc_time_t time)" `286 
v L "time" 2 535 "*rtc_time_t" `289 
f B "rtc_read_alarm" 2 535 "void(*rtc_time_t time)" `288 
v L "time" 2 536 "*rtc_time_t" `291 
f B "rtc_write_alarm" 2 536 "void(*rtc_time_t time)" `290  "Constants used in setup_rtc() are:  // Second param is calibration"
d G "RTC_ENABLE" 2 538 "0x8000"
d G "RTC_DISABLE" 2 539 "0"
d G "RTC_OUTPUT_SECONDS" 2 540 "0x20400"
d G "RTC_OUTPUT_ALARM" 2 541 "0x00400"
d G "RTC_ALARM_ENABLE" 2 544 "0x8000"
d G "RTC_ALARM_DISABLE" 2 545 "0"
d G "RTC_CHIME_ENABLE" 2 546 "0x4000"
d G "RTC_CHIME_DISABLE" 2 547 "0"
d G "RTC_ALARM_HALFSECOND" 2 549 "0x0000"
d G "RTC_ALARM_SECOND" 2 550 "0x0400"
d G "RTC_ALARM_10_SECONDS" 2 551 "0x0800"
d G "RTC_ALARM_MINUTE" 2 552 "0x0C00"
d G "RTC_ALARM_10_MINUTES" 2 553 "0x1000"
d G "RTC_ALARM_HOUR" 2 554 "0x1400"
d G "RTC_ALARM_DAY" 2 555 "0x1800"
d G "RTC_ALARM_WEEK" 2 556 "0x1C00"
d G "RTC_ALARM_MONTH" 2 557 "0x2000"
d G "RTC_ALARM_YEAR" 2 558 "0x2400"
c L "rtc_write_alarm" 2 1 4 "FUNCTION"
v L "mode" 2 564 "int16" `293 
v L "filter" 2 564 "int16" `294 
v L "maxcount" 2 564 "int16" `295 
f B "setup_qei" 2 564 "void(int16 mode,int16 filter,int16 maxcount)" `292 
v L "unit" 2 565 "int8" `297 
v L "mode" 2 565 "int16" `298 
v L "filter" 2 565 "int16" `299 
v L "maxcount" 2 565 "int16" `300 
f G "setup_qei" 2 565 "void(int8 unit,int16 mode,int16 filter,int16 maxcount)" `296 
v L "count" 2 566 "int16" `302 
f B "qei_set_count" 2 566 "void(int16 count)" `301 
v L "unit" 2 567 "int8" `304 
v L "count" 2 567 "int16" `305 
f G "qei_set_count" 2 567 "void(int8 unit,int16 count)" `303 
f B "qei_get_count" 2 568 "int16()" `306 
v L "unit" 2 569 "int8" `308 
f G "qei_get_count" 2 569 "int16(int8 unit)" `307 
f B "qei_status" 2 570 "int16()" `309 
v L "unit" 2 571 "int8" `311 
f G "qei_status" 2 571 "int16(int8 unit)" `310  "Constants used in setup_qei() first param are:"
d G "QEI_DISABLED" 2 573 "0"
d G "QEI_MODE_X2" 2 574 "0x0400"
d G "QEI_MODE_X4" 2 575 "0x0600"
d G "QEI_MODE_TIMER" 2 576 "0x0100"
d G "QEI_STOP_WHEN_IDLE" 2 577 "0x2000"
d G "QEI_SWAP_AB" 2 578 "0x0080"
d G "QEI_OUTPUT_ENABLE" 2 579 "0x0040"
d G "QEI_RESET_WHEN_MAXCOUNT" 2 580 "0x0100"
d G "QEI_RESET_WHEN_IDX_PULSE" 2 581 "0x0004"
d G "QEI_TIMER_GATED" 2 582 "0x0020"
d G "QEI_TIMER_INTERNAL" 2 583 "0x0000"
d G "QEI_TIMER_EXTERNAL" 2 584 "0x0002"
d G "QEI_TIMER_DIV_BY_1" 2 585 "0x0000"
d G "QEI_TIMER_DIV_BY_8" 2 586 "0x0008"
d G "QEI_TIMER_DIV_BY_64" 2 587 "0x0010"
d G "QEI_TIMER_DIV_BY_256" 2 588 "0x0018"
d G "QEI_FILTER_DIV_1" 2 590 "0x0000"
d G "QEI_FILTER_DIV_2" 2 591 "0x0010"
d G "QEI_FILTER_DIV_4" 2 592 "0x0020"
d G "QEI_FILTER_DIV_16" 2 593 "0x0030"
d G "QEI_FILTER_DIV_32" 2 594 "0x0040"
d G "QEI_FILTER_DIV_64" 2 595 "0x0050"
d G "QEI_FILTER_DIV_128" 2 596 "0x0060"
d G "QEI_FILTER_DIV_256" 2 597 "0x0070"
d G "QEI_FILTER_OUTPUT" 2 598 "0x0080"
d G "QEI_NO_ERROR_INTS" 2 599 "0x0100"
d G "QEI_IDX_WHEN_A0" 2 600 "0x0000" "for 2X mode"
d G "QEI_IDX_WHEN_A1" 2 601 "0x0200" "for 2X mode"
d G "QEI_IDX_WHEN_B0" 2 602 "0x0400" "for 2X mode"
d G "QEI_IDX_WHEN_B1" 2 603 "0x0600" "for 2X mode"
d G "QEI_IDX_WHEN_A0_B0" 2 604 "0x0000" "for 4X mode"
d G "QEI_IDX_WHEN_A1_B0" 2 605 "0x0200" "for 4X mode"
d G "QEI_IDX_WHEN_A0_B1" 2 606 "0x0400" "for 4X mode"
d G "QEI_IDX_WHEN_A1_B1" 2 607 "0x0600" "for 4X mode"
d G "QEI_POS_ERROR" 2 609 "0x8000"
d G "QEI_FORWARD" 2 610 "0x0800"
d G "QEI_INDEX_PIN" 2 611 "0x1000"
c L "qei_status" 2 1 5 "FUNCTION"
v L "pwm" 2 618 "int8" `313 
v L "mode" 2 618 "int32" `314 
v L "timebase" 2 618 "int32" `315 
f B "setup_motor_pwm" 2 618 "void(int8 pwm,int32 mode,int32 timebase)" `312 
v L "pwm" 2 619 "int8" `317 
v L "mode" 2 619 "int32" `318 
v L "prescale" 2 619 "int8" `319 
v L "postscale" 2 619 "int8" `320 
v L "period" 2 619 "int16" `321 
f G "setup_motor_pwm" 2 619 "void(int8 pwm,int32 mode,int8 prescale,int8 postscale,int16 period)" `316 
v L "pwm" 2 620 "int8" `323 
v L "pin_pair" 2 620 "int8" `324 
v L "mode" 2 620 "int16" `325 
v L "active_deadtime" 2 620 "int8" `326 
v L "inactive_deadtime" 2 620 "int8" `327 
f B "set_motor_unit" 2 620 "void(int8 pwm,int8 pin_pair,int16 mode,int8 active_deadtime,int8 inactive_deadtime)" `322 
v L "pwm" 2 621 "int8" `329 
v L "pin_pair" 2 621 "int8" `330 
v L "duty" 2 621 "int16" `331 
f B "set_motor_pwm_duty" 2 621 "void(int8 pwm,int8 pin_pair,int16 duty)" `328 
v L "??65535" 2 622 "int8" `333 
v L "time" 2 622 "sint16" `334 
f B "set_motor_pmw_event" 2 622 "void(int8 ,sint16 time)" `332 
v L "pwm" 2 623 "int8" `336 
f B "get_motor_pwm_count" 2 623 "int16(int8 pwm)" `335  "Constants used in setup_motor_pwm() second param are (first param is unit number 1,2...):"
d G "MPWM_DISABLED" 2 625 "0"
d G "MPWM_FREE_RUN" 2 626 "0x8000"
d G "MPWM_SINGLE_PULSE" 2 627 "0x8001"
d G "MPWM_UP_DOWN" 2 628 "0x8002"
d G "MPWM_UP_DOWN_WITH_INTS" 2 629 "0x8003"
d G "MPWM_HALT_WHEN_IDLE" 2 631 "0x2000"
d G "MPWM_DUTY_UPDATES_IMMEADIATE" 2 632 "0x40000"
d G "MPWM_SYNC_OVERRIDES" 2 633 "0x20000"
d G "MPWM_DISABLE_UPDATES" 2 634 "0x10000"
d G "MPWM_LATCH_FAULTS" 2 635 "0x100000"
d G "MPWM_INDEPENDENT" 2 638 "0x0001"
d G "MPWM_ENABLE" 2 639 "0x0006" "both H and L"
d G "MPWM_ENABLE_H" 2 640 "0x0004"
d G "MPWM_ENABLE_L" 2 641 "0x0002"
d G "MPWM_FORCE_L_0" 2 643 "0x0010"
d G "MPWM_FORCE_L_1" 2 644 "0x0050"
d G "MPWM_FORCE_H_0" 2 645 "0x0020"
d G "MPWM_FORCE_H_1" 2 646 "0x00A0"
d G "MPWM_FAULTA_LA_HA" 2 648 "0x0700"
d G "MPWM_FAULTA_LA_HI" 2 649 "0x0500"
d G "MPWM_FAULTA_LI_HA" 2 650 "0x0600"
d G "MPWM_FAULTA_LI_HI" 2 651 "0x0400"
d G "MPWM_FAULTB_LA_HA" 2 652 "0x7000"
d G "MPWM_FAULTB_LA_HI" 2 653 "0x5000"
d G "MPWM_FAULTB_LI_HA" 2 654 "0x6000"
d G "MPWM_FAULTB_LI_HI" 2 655 "0x4000"
d G "MPWM_FAULT_NO_CHANGE" 2 656 "0x0000"
c L "get_motor_pwm_count" 2 1 4 "FUNCTION"
v L "mode" 2 662 "int16" `338 
v L "size" 2 662 "int16" `339 
v L "receive_slot" 2 662 "int16" `340 
v L "transmit_slot" 2 662 "int16" `341 
v L "sample_rate" 2 662 "int16" `342 
f B "setup_dci" 2 662 "void(int16 mode,int16 size,int16 receive_slot,int16 transmit_slot,int16 sample_rate)" `337 
f B "dci_start" 2 663 "void()" `343 
f B "dci_read" 2 664 "sint16()" `344 
v L "??65535" 2 665 "sint16" `346 
f B "dci_write" 2 665 "void(sint16 )" `345 
f B "dci_data_received" 2 666 "int8()" `347 
f B "dci_transmit_ready" 2 667 "int8()" `348  "Constants used in setup_dci() first param are:"
d G "MULTICHANNEL_MODE" 2 669 "0x0000"
d G "I2S_MODE" 2 670 "0x0001"
d G "AC97_16BIT_MODE" 2 671 "0x0002"
d G "AC97_20BIT_MODE" 2 672 "0x0003"
d G "JUSTIFY_DATA" 2 674 "0x0020" "Start data transmission on the same clock cycle as COFS pulses (multichannel)"
d G "MULTI_DEVICE_BUS" 2 675 "0x0040" "Tri-states the CSDO pin during unused time slots, normally drives '0'"
d G "UNDERFLOW_LAST" 2 677 "0x0080" "Transmits the last written value to the dci when data underflow occurs. Default is undeflow silence."
d G "UNDERFLOW_SILENCE" 2 678 "0x0000" "Transmit '0's on data undeflow. This will cause a clicking noise if you are underflowing data while outputing to a codec."
d G "DCI_SLAVE" 2 680 "0x0100" "Default is master"
d G "DCI_MASTER" 2 681 "0x0000"
d G "SAMPLE_FALLING_EDGE" 2 683 "0x0000" "Default is Sample on the rising edge of the clock"
d G "SAMPLE_RISING_EDGE" 2 684 "0x0200"
d G "DCI_CLOCK_INPUT" 2 686 "0x0400" "SCLK is an input (supplied by codec or external source)"
d G "DCI_CLOCK_OUTPUT" 2 687 "0x0000" "Default is clock output"
d G "ENABLE_LOOPBACK" 2 689 "0x0800" "Connect the CSDI/CSDO internally; loops all of the sound back onto the bus"
d G "CODEC_MULTICHANNEL" 2 691 "0x0000" "enables multichannel (generic) codec support"
d G "CODEC_I2S" 2 692 "0x0001" "enables the I2S protocol"
d G "CODEC_AC16" 2 693 "0x0002" "enables the AC-16 protocol, setupCodecTransmission has no effect"
d G "CODEC_AC20" 2 694 "0x0003" "enables the AC-20 protocol, setupCodecTransmission has no effect"
d G "BUS_MASTER" 2 696 "0x0000" "designates this device as the bus master"
d G "BUS_SLAVE" 2 697 "0x0300" "designates this device as a slave on a bus controlled by another codec"
d G "TRISTATE_BUS" 2 699 "0x0040" "when in master mode, the module will be in high impedance"
d G "SYNC_COFS_DATA_PULSE" 2 701 "0x0020" "signifies that data starts transmitting on the same SCK pulse as the edge of the COFS pulse"
d G "SAMPLE_RISING" 2 704 "0x0200" "sample data on the rising edge of the clock"
d G "SAMPLE_FALLING" 2 705 "0x0000" "sample data on the falling edge of the clock"
d G "DCI_4BIT_WORD" 2 708 "0x0003"
d G "DCI_5BIT_WORD" 2 709 "0x0004"
d G "DCI_6BIT_WORD" 2 710 "0x0005"
d G "DCI_7BIT_WORD" 2 711 "0x0006"
d G "DCI_8BIT_WORD" 2 712 "0x0007"
d G "DCI_9BIT_WORD" 2 713 "0x0008"
d G "DCI_10BIT_WORD" 2 714 "0x0009"
d G "DCI_11BIT_WORD" 2 715 "0x000A"
d G "DCI_12BIT_WORD" 2 716 "0x000B"
d G "DCI_13BIT_WORD" 2 717 "0x000C"
d G "DCI_14BIT_WORD" 2 718 "0x000D"
d G "DCI_15BIT_WORD" 2 719 "0x000E"
d G "DCI_16BIT_WORD" 2 720 "0x000F"
d G "DCI_1WORD_FRAME" 2 722 "0x0000"
d G "DCI_2WORD_FRAME" 2 723 "0x0010 << 1"
d G "DCI_3WORD_FRAME" 2 724 "0x0020 << 1"
d G "DCI_4WORD_FRAME" 2 725 "0x0030 << 1"
d G "DCI_5WORD_FRAME" 2 726 "0x0040 << 1"
d G "DCI_6WORD_FRAME" 2 727 "0x0050 << 1"
d G "DCI_7WORD_FRAME" 2 728 "0x0060 << 1"
d G "DCI_8WORD_FRAME" 2 729 "0x0070 << 1"
d G "DCI_9WORD_FRAME" 2 730 "0x0080 << 1"
d G "DCI_10WORD_FRAME" 2 731 "0x0090 << 1"
d G "DCI_11WORD_FRAME" 2 732 "0x00A0 << 1"
d G "DCI_12WORD_FRAME" 2 733 "0x00B0 << 1"
d G "DCI_13WORD_FRAME" 2 734 "0x00C0 << 1"
d G "DCI_14WORD_FRAME" 2 735 "0x00D0 << 1"
d G "DCI_15WORD_FRAME" 2 736 "0x00E0 << 1"
d G "DCI_16WORD_FRAME" 2 737 "0x00F0 << 1"
d G "DCI_1WORD_INTERRUPT" 2 739 "0x0000"
d G "DCI_2WORD_INTERRUPT" 2 740 "0x0400"
d G "DCI_3WORD_INTERRUPT" 2 741 "0x0800"
d G "DCI_4WORD_INTERRUPT" 2 742 "0x0C00"
d G "RECEIVE_NONE" 2 745 "0x0000"
d G "RECEIVE_ALL" 2 746 "0xFFFF"
d G "RECEIVE_SLOT0" 2 747 "0x0001"
d G "RECEIVE_SLOT1" 2 748 "0x0002"
d G "RECEIVE_SLOT2" 2 749 "0x0004"
d G "RECEIVE_SLOT3" 2 750 "0x0008"
d G "RECEIVE_SLOT4" 2 751 "0x0010"
d G "RECEIVE_SLOT5" 2 752 "0x0020"
d G "RECEIVE_SLOT6" 2 753 "0x0040"
d G "RECEIVE_SLOT7" 2 754 "0x0080"
d G "RECEIVE_SLOT8" 2 755 "0x0100"
d G "RECEIVE_SLOT9" 2 756 "0x0200"
d G "RECEIVE_SLOT10" 2 757 "0x0400"
d G "RECEIVE_SLOT11" 2 758 "0x0800"
d G "RECEIVE_SLOT12" 2 759 "0x1000"
d G "RECEIVE_SLOT13" 2 760 "0x2000"
d G "RECEIVE_SLOT14" 2 761 "0x4000"
d G "RECEIVE_SLOT15" 2 762 "0x8000"
d G "TRANSMIT_NONE" 2 765 "0x0000"
d G "TRANSMIT_ALL" 2 766 "0xFFFF"
d G "TRANSMIT_SLOT0" 2 767 "0x0001"
d G "TRANSMIT_SLOT1" 2 768 "0x0002"
d G "TRANSMIT_SLOT2" 2 769 "0x0004"
d G "TRANSMIT_SLOT3" 2 770 "0x0008"
d G "TRANSMIT_SLOT4" 2 771 "0x0010"
d G "TRANSMIT_SLOT5" 2 772 "0x0020"
d G "TRANSMIT_SLOT6" 2 773 "0x0040"
d G "TRANSMIT_SLOT7" 2 774 "0x0080"
d G "TRANSMIT_SLOT8" 2 775 "0x0100"
d G "TRANSMIT_SLOT9" 2 776 "0x0200"
d G "TRANSMIT_SLOT10" 2 777 "0x0400"
d G "TRANSMIT_SLOT11" 2 778 "0x0800"
d G "TRANSMIT_SLOT12" 2 779 "0x1000"
d G "TRANSMIT_SLOT13" 2 780 "0x2000"
d G "TRANSMIT_SLOT14" 2 781 "0x4000"
d G "TRANSMIT_SLOT15" 2 782 "0x8000"
c L "dci_transmit_ready" 2 1 3 "FUNCTION"
v L "channel" 2 788 "int8" `350 
v L "pheripheral" 2 788 "int32" `351 
v L "mode" 2 788 "int8" `352 
f B "setup_dma" 2 788 "void(int8 channel,int32 pheripheral,int8 mode)" `349 
v L "channel" 2 789 "int8" `354 
v L "mode" 2 789 "int16" `355 
v L "addressa" 2 789 "int16" `356 
f B "dma_start" 2 789 "void(int8 channel,int16 mode,int16 addressa)" `353 
v L "channel" 2 790 "int8" `358 
v L "mode" 2 790 "int16" `359 
v L "addressa" 2 790 "int16" `360 
v L "count" 2 790 "int16" `361 
f G "dma_start" 2 790 "void(int8 channel,int16 mode,int16 addressa,int16 count)" `357 
v L "channel" 2 791 "int8" `358 
v L "mode" 2 791 "int16" `359 
v L "addressa" 2 791 "int16" `360 
v L "addressb" 2 791 "int16" `366 
f G "dma_start" 2 791 "void(int8 channel,int16 mode,int16 addressa,int16 addressb)" `362 
v L "channel" 2 792 "int8" `368 
v L "mode" 2 792 "int16" `369 
v L "addressa" 2 792 "int16" `370 
v L "addressb" 2 792 "int16" `371 
v L "count" 2 792 "int16" `372 
f G "dma_start" 2 792 "void(int8 channel,int16 mode,int16 addressa,int16 addressb,int16 count)" `367 
v L "channel" 2 793 "int8" `374 
f B "dma_status" 2 793 "int8(int8 channel)" `373  "Constants used in setup_dma() second param are:"
d G "DMA_IN_SPI1" 2 795 " (0x0A0000|getenv("sfr:SPI1BUF"))"
d G "DMA_OUT_SPI1" 2 796 " (0x8A0000|getenv("sfr:SPI1BUF"))"
d G "DMA_IN_SPI2" 2 797 " (0x210000|getenv("sfr:SPI2BUF"))"
d G "DMA_OUT_SPI2" 2 798 " (0xA10000|getenv("sfr:SPI2BUF"))"
d G "DMA_IN_UART1" 2 799 " (0x0B0000|getenv("sfr:U1RXREG"))"
d G "DMA_OUT_UART1" 2 800 " (0x8C0000|getenv("sfr:U1TXREG"))"
d G "DMA_IN_UART2" 2 801 " (0x1E0000|getenv("sfr:U2RXREG"))"
d G "DMA_OUT_UART2" 2 802 " (0x9F0000|getenv("sfr:U2TXREG"))"
d G "DMA_IN_ADC1" 2 803 " (0x0D0000|getenv("sfr:ADC1BUF0"))"
d G "DMA_IN_ECAN1" 2 804 " (0x220000|getenv("sfr:C1RXD"))"
d G "DMA_OUT_ECAN1" 2 805 " (0xC60000|getenv("sfr:C1TXD"))"
d G "DMA_INT0" 2 806 "0x000000" "or in direction and perif address"
d G "DMA_IC1" 2 807 "0x010000" "or in direction and perif address"
d G "DMA_IC2" 2 808 "0x050000" "or in direction and perif address"
d G "DMA_OC1" 2 809 "0x020000" "or in direction and perif address"
d G "DMA_OC2" 2 810 "0x060000" "or in direction and perif address"
d G "DMA_TIMER2" 2 811 "0x070000" "or in direction and perif address"
d G "DMA_TIMER3" 2 812 "0x080000" "or in direction and perif address"
d G "DMA_OUT_DCI" 2 813 " (0xBC0000|getenv("sfr:TXBUF0"))"
d G "DMA_IN_DCI" 2 814 " (0x3C0000|getenv("sfr:RXBUF0"))"
d G "DMA_IN" 2 815 "0x00"
d G "DMA_OUT" 2 816 "0x800000"
d G "DMA_BYTE" 2 818 "0x40"
d G "DMA_WORD" 2 819 "0x00" "default"
d G "DMA_HALF_INT" 2 820 "0x10" "interrupt when half full"
d G "DMA_WRITE_NULL" 2 821 "0x08"
d G "DMA_CONTINOUS" 2 823 "0x00"
d G "DMA_ONE_SHOT" 2 824 "0x01"
d G "DMA_PING_PONG" 2 825 "0x02"
d G "DMA_NO_INC" 2 826 "0x10"
d G "DMA_PERIF_ADDR" 2 827 "0x20" "Device supplies address"
d G "DMA_FORCE_NOW" 2 828 "0x100"
d G "DMA_IN_ERROR" 2 830 "0x01"
d G "DMA_OUT_ERROR" 2 831 "0x02"
d G "DMA_B_SELECT" 2 832 "0x04"
c L "dma_status" 2 1 3 "FUNCTION"
v L "x" 2 838 "sint8" `376 
f B "abs" 2 838 "sint8(sint8 x)" `375 
v L "x" 2 839 "sint16" `378 
f G "abs" 2 839 "sint16(sint16 x)" `377 
v L "x" 2 840 "sint32" `380 
f G "abs" 2 840 "sint32(sint32 x)" `379 
v L "x" 2 841 "float" `382 
f G "abs" 2 841 "float(float x)" `381 
v L "??65535" 2 842 "int8" `384 
v L "??65535" 2 842 "int8" `385 
f B "_mul" 2 842 "int16(int8 ,int8 )" `383 
v L "??65535" 2 843 "sint8" `384 
v L "??65535" 2 843 "sint8" `388 
f G "_mul" 2 843 "sint16(sint8 ,sint8 )" `386 
v L "??65535" 2 844 "int16" `384 
v L "??65535" 2 844 "int16" `391 
f G "_mul" 2 844 "int32(int16 ,int16 )" `389 
v L "??65535" 2 845 "sint16" `384 
v L "??65535" 2 845 "sint16" `394 
f G "_mul" 2 845 "sint32(sint16 ,sint16 )" `392 
v L "x" 2 846 "?" `396 
f G "abs" 2 846 "?(? x)" `395 
v L "x" 2 847 "?" `398 
f G "abs" 2 847 "?(? x)" `397 
v L "x" 2 848 "?" `400 
f G "abs" 2 848 "?(? x)" `399 
v L "x" 2 849 "?" `402 
f G "abs" 2 849 "?(? x)" `401 
v L "??65535" 2 850 "int32" `384 
v L "??65535" 2 850 "int32" `405 
f G "_mul" 2 850 "?(int32 ,int32 )" `403 
v L "??65535" 2 851 "sint32" `384 
v L "??65535" 2 851 "sint32" `408 
f G "_mul" 2 851 "?(sint32 ,sint32 )" `406 
v L "??65535" 2 852 "?" `384 
v L "??65535" 2 852 "?" `411 
f G "_mul" 2 852 "?(? ,? )" `409 
v L "??65535" 2 853 "?" `384 
v L "??65535" 2 853 "?" `414 
f G "_mul" 2 853 "?(? ,? )" `412  "Memory Manipulation Prototypes:"
v L "dest" 2 856 "*sint8" `416 
v L "src" 2 856 "*sint8" `417 
f B "strcpy" 2 856 "void(*sint8 dest,*sint8 src)" `415 
v L "dest" 2 857 "*sint8" `419 
v L "src" 2 857 "*sint8" `420 
f B "strcopy" 2 857 "void(*sint8 dest,*sint8 src)" `418 
v L "destination" 2 858 "*int8" `422 
v L "value" 2 858 "int8" `423 
v L "num" 2 858 "int16" `424 
f B "memset" 2 858 "void(*int8 destination,int8 value,int16 num)" `421 
v L "destination" 2 859 "*int8" `426 
v L "source" 2 859 "*int8" `427 
v L "num" 2 859 "int16" `428 
f B "memcpy" 2 859 "void(*int8 destination,*int8 source,int16 num)" `425  "Data Manipulators Prototypes:"
v L "address" 2 862 "*int8" `430 
v L "bytes" 2 862 "int8" `431 
v L "value" 2 862 "int8" `432 
f B "shift_left" 2 862 "int8(*int8 address,int8 bytes,int8 value)" `429 
v L "address" 2 863 "*int8" `434 
v L "bytes" 2 863 "int8" `435 
v L "value" 2 863 "int8" `436 
f B "shift_right" 2 863 "int8(*int8 address,int8 bytes,int8 value)" `433 
v L "address" 2 864 "*int8" `438 
v L "bytes" 2 864 "int8" `439 
f B "rotate_left" 2 864 "void(*int8 address,int8 bytes)" `437 
v L "address" 2 865 "*int8" `441 
v L "bytes" 2 865 "int8" `442 
f B "rotate_right" 2 865 "void(*int8 address,int8 bytes)" `440 
v L "value" 2 866 "int8" `444 
f B "swap" 2 866 "void(int8 value)" `443 
v L "var" 2 867 "int16" `446 
v L "offset" 2 867 "int8" `447 
f B "make8" 2 867 "int8(int16 var,int8 offset)" `445 
v L "var" 2 868 "int32" `446 
v L "offset" 2 868 "int8" `450 
f G "make8" 2 868 "int8(int32 var,int8 offset)" `448 
v L "varhigh" 2 869 "int8" `452 
v L "varlow" 2 869 "int8" `453 
f B "make16" 2 869 "int16(int8 varhigh,int8 varlow)" `451 
v L "var1" 2 870 "int16" `455 
f B "make32" 2 870 "int32(int16 var1)" `454 
v L "var1" 2 871 "int16" `457 
v L "var2" 2 871 "int16" `458 
f G "make32" 2 871 "int32(int16 var1,int16 var2)" `456 
v L "var1" 2 872 "int16" `457 
v L "var2" 2 872 "int8" `461 
f G "make32" 2 872 "int32(int16 var1,int8 var2)" `459 
v L "var1" 2 873 "int16" `463 
v L "var2" 2 873 "int8" `464 
v L "var3" 2 873 "int8" `465 
f G "make32" 2 873 "int32(int16 var1,int8 var2,int8 var3)" `462 
v L "var1" 2 874 "int8" `467 
f G "make32" 2 874 "int32(int8 var1)" `466 
v L "var1" 2 875 "int8" `457 
v L "var2" 2 875 "int8" `470 
f G "make32" 2 875 "int32(int8 var1,int8 var2)" `468 
v L "var1" 2 876 "int8" `463 
v L "var2" 2 876 "int8" `464 
v L "var3" 2 876 "int8" `474 
f G "make32" 2 876 "int32(int8 var1,int8 var2,int8 var3)" `471 
v L "var1" 2 877 "int8" `476 
v L "var2" 2 877 "int8" `477 
v L "var3" 2 877 "int8" `478 
v L "var4" 2 877 "int8" `479 
f G "make32" 2 877 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `475 
v L "var1" 2 878 "int8" `457 
v L "var2" 2 878 "int16" `482 
f G "make32" 2 878 "int32(int8 var1,int16 var2)" `480 
v L "var1" 2 879 "int8" `463 
v L "var2" 2 879 "int16" `464 
v L "var3" 2 879 "int8" `486 
f G "make32" 2 879 "int32(int8 var1,int16 var2,int8 var3)" `483 
v L "var1" 2 880 "int8" `463 
v L "var2" 2 880 "int8" `464 
v L "var3" 2 880 "int16" `490 
f G "make32" 2 880 "int32(int8 var1,int8 var2,int16 var3)" `487 
v L "var" 2 881 "int8" `492 
v L "bit" 2 881 "int8" `493 
f B "bit_set" 2 881 "void(int8 var,int8 bit)" `491 
v L "var" 2 882 "int16" `492 
v L "bit" 2 882 "int8" `496 
f G "bit_set" 2 882 "void(int16 var,int8 bit)" `494 
v L "var" 2 883 "int32" `492 
v L "bit" 2 883 "int8" `499 
f G "bit_set" 2 883 "void(int32 var,int8 bit)" `497 
v L "var" 2 884 "int8" `501 
v L "bit" 2 884 "int8" `502 
f B "bit_clear" 2 884 "void(int8 var,int8 bit)" `500 
v L "var" 2 885 "int16" `501 
v L "bit" 2 885 "int8" `505 
f G "bit_clear" 2 885 "void(int16 var,int8 bit)" `503 
v L "var" 2 886 "int32" `501 
v L "bit" 2 886 "int8" `508 
f G "bit_clear" 2 886 "void(int32 var,int8 bit)" `506 
v L "var" 2 887 "int8" `510 
v L "bit" 2 887 "int8" `511 
f B "bit_test" 2 887 "int8(int8 var,int8 bit)" `509 
v L "var" 2 888 "int16" `510 
v L "bit" 2 888 "int8" `514 
f G "bit_test" 2 888 "int8(int16 var,int8 bit)" `512 
v L "var" 2 889 "int32" `510 
v L "bit" 2 889 "int8" `517 
f G "bit_test" 2 889 "int8(int32 var,int8 bit)" `515 
v L "var" 2 890 "?" `492 
v L "bit" 2 890 "int8" `520 
f G "bit_set" 2 890 "void(? var,int8 bit)" `518 
v L "var" 2 891 "?" `492 
v L "bit" 2 891 "int8" `523 
f G "bit_set" 2 891 "void(? var,int8 bit)" `521 
v L "var" 2 892 "?" `501 
v L "bit" 2 892 "int8" `526 
f G "bit_clear" 2 892 "void(? var,int8 bit)" `524 
v L "var" 2 893 "?" `501 
v L "bit" 2 893 "int8" `529 
f G "bit_clear" 2 893 "void(? var,int8 bit)" `527 
v L "var" 2 894 "?" `510 
v L "bit" 2 894 "int8" `532 
f G "bit_test" 2 894 "int8(? var,int8 bit)" `530 
v L "var" 2 895 "?" `510 
v L "bit" 2 895 "int8" `535 
f G "bit_test" 2 895 "int8(? var,int8 bit)" `533 
v L "value" 2 896 "int8" `537 
v L "var" 2 896 "int16" `538 
f B "bit_first" 2 896 "int8(int8 value,int16 var)" `536 
v L "var" 2 897 "sint16" `540 
f B "bit_last" 2 897 "int8(sint16 var)" `539 
v L "value" 2 898 "int8" `542 
v L "var" 2 898 "sint16" `543 
f G "bit_last" 2 898 "int8(int8 value,sint16 var)" `541  "#use delay() Prototypes:"
v L "count" 2 901 "int16" `545 
f B "delay_cycles" 2 901 "void(int16 count)" `544 
v L "time" 2 902 "int16" `547 
f B "delay_ms" 2 902 "void(int16 time)" `546 
v L "time" 2 903 "int16" `549 
f B "delay_us" 2 903 "void(int16 time)" `548  "#use rs232() Prototypes:"
v L "cdata" 2 906 "sint8" `551 
f B "putchar" 2 906 "void(sint8 cdata)" `550 
v L "cdata" 2 907 "sint8" `553 
v L "stream" 2 907 "int8" `554 
f G "putchar" 2 907 "void(sint8 cdata,int8 stream)" `552 
v L "string" 2 908 "*sint8" `556 
f B "puts" 2 908 "void(*sint8 string)" `555 
v L "string" 2 909 "*sint8" `558 
v L "stream" 2 909 "int8" `559 
f G "puts" 2 909 "void(*sint8 string,int8 stream)" `557 
f B "getch" 2 910 "sint8()" `560 
v L "stream" 2 911 "int8" `562 
f G "getch" 2 911 "sint8(int8 stream)" `561 
v L "string" 2 912 "*sint8" `564 
f B "gets" 2 912 "void(*sint8 string)" `563 
v L "string" 2 913 "*sint8" `566 
v L "stream" 2 913 "int8" `567 
f G "gets" 2 913 "void(*sint8 string,int8 stream)" `565 
f B "kbhit" 2 914 "int8()" `568 
v L "stream" 2 915 "int8" `570 
f G "kbhit" 2 915 "int8(int8 stream)" `569 
v L "string" 2 916 "*sint8" `572 
f B "printf" 2 916 "void(*sint8 string,*int8 _VA_LIST)" `571 
v L "stream" 2 917 "int8" `575 
v L "string" 2 917 "*sint8" `576 
f B "fprintf" 2 917 "void(int8 stream,*sint8 string,*int8 _VA_LIST)" `574 
f B "putc_send" 2 918 "void()" `578 
v L "stream" 2 919 "int8" `580 
f B "fputc_send" 2 919 "void(int8 stream)" `579 
f B "rcv_buffer_full" 2 920 "int8()" `581 
v L "stream" 2 921 "int8" `583 
f G "rcv_buffer_full" 2 921 "int8(int8 stream)" `582 
f B "rcv_buffer_bytes" 2 922 "int16()" `584 
v L "stream" 2 923 "int8" `586 
f G "rcv_buffer_bytes" 2 923 "int16(int8 stream)" `585 
f B "tx_buffer_full" 2 924 "int8()" `587 
v L "stream" 2 925 "int8" `589 
f G "tx_buffer_full" 2 925 "int8(int8 stream)" `588 
f B "tx_buffer_bytes" 2 926 "int16()" `590 
v L "stream" 2 927 "int8" `592 
f G "tx_buffer_bytes" 2 927 "int16(int8 stream)" `591  "#use i2c() Prototypes:"
f B "i2c_read" 2 930 "int8()" `593 
v L "stream" 2 931 "int8" `595 
f G "i2c_read" 2 931 "int8(int8 stream)" `594 
v L "stream" 2 932 "int8" `597 
v L "ack" 2 932 "int8" `598 
f G "i2c_read" 2 932 "int8(int8 stream,int8 ack)" `596 
v L "data" 2 933 "int8" `600 
f B "i2c_write" 2 933 "int8(int8 data)" `599 
v L "stream" 2 934 "int8" `602 
v L "data" 2 934 "int8" `603 
f G "i2c_write" 2 934 "int8(int8 stream,int8 data)" `601 
f B "i2c_start" 2 935 "void()" `604 
v L "stream" 2 936 "int8" `606 
f G "i2c_start" 2 936 "void(int8 stream)" `605 
v L "stream" 2 937 "int8" `608 
v L "restart" 2 937 "int8" `609 
f G "i2c_start" 2 937 "void(int8 stream,int8 restart)" `607 
f B "i2c_stop" 2 938 "void()" `610 
v L "stream" 2 939 "int8" `612 
f G "i2c_stop" 2 939 "void(int8 stream)" `611 
f B "i2c_isr_state" 2 940 "sint8()" `613 
v L "addr" 2 941 "int8" `615 
f B "i2c_slaveaddr" 2 941 "void(int8 addr)" `614 
v L "stream" 2 942 "int8" `617 
v L "addr" 2 942 "int8" `618 
f G "i2c_slaveaddr" 2 942 "void(int8 stream,int8 addr)" `616 
f B "i2c_poll" 2 943 "int8()" `619 
v L "stream" 2 944 "int8" `621 
f G "i2c_poll" 2 944 "int8(int8 stream)" `620 
v L "baud" 2 945 "int32" `623 
f B "i2c_init" 2 945 "void(int32 baud)" `622 
v L "stream" 2 946 "int8" `625 
v L "baud" 2 946 "int32" `626 
f G "i2c_init" 2 946 "void(int8 stream,int32 baud)" `624  "#use spi() Prototypes:"
f B "spi_xfer" 2 949 "int8()" `627 
f G "spi_xfer" 2 950 "int16()" `628 
f G "spi_xfer" 2 951 "int32()" `629 
v L "data" 2 952 "int8" `631 
f G "spi_xfer" 2 952 "int8(int8 data)" `630 
v L "data" 2 953 "int16" `633 
f G "spi_xfer" 2 953 "int16(int16 data)" `632 
v L "data" 2 954 "int32" `635 
f G "spi_xfer" 2 954 "int32(int32 data)" `634 
v L "stream" 2 955 "int8" `637 
v L "data" 2 955 "int8" `638 
f G "spi_xfer" 2 955 "int8(int8 stream,int8 data)" `636 
v L "stream" 2 956 "int8" `637 
v L "data" 2 956 "int16" `641 
f G "spi_xfer" 2 956 "int16(int8 stream,int16 data)" `639 
v L "stream" 2 957 "int8" `637 
v L "data" 2 957 "int32" `644 
f G "spi_xfer" 2 957 "int32(int8 stream,int32 data)" `642 
v L "stream" 2 958 "int8" `646 
v L "data" 2 958 "int8" `647 
v L "bits" 2 958 "int8" `648 
f G "spi_xfer" 2 958 "int8(int8 stream,int8 data,int8 bits)" `645 
v L "stream" 2 959 "int8" `646 
v L "data" 2 959 "int16" `647 
v L "bits" 2 959 "int8" `652 
f G "spi_xfer" 2 959 "int16(int8 stream,int16 data,int8 bits)" `649 
v L "stream" 2 960 "int8" `646 
v L "data" 2 960 "int32" `647 
v L "bits" 2 960 "int8" `656 
f G "spi_xfer" 2 960 "int32(int8 stream,int32 data,int8 bits)" `653 
v L "baud" 2 961 "int32" `658 
f B "spi_init" 2 961 "void(int32 baud)" `657 
v L "stream" 2 962 "int8" `660 
v L "baud" 2 962 "int32" `661 
f G "spi_init" 2 962 "void(int8 stream,int32 baud)" `659 
v L "baud" 2 963 "int32" `663 
f B "spi_speed" 2 963 "void(int32 baud)" `662 
v L "stream" 2 964 "int8" `665 
v L "baud" 2 964 "int32" `666 
f G "spi_speed" 2 964 "void(int8 stream,int32 baud)" `664 
v L "stream" 2 965 "int8" `668 
v L "baud" 2 965 "int32" `669 
v L "clock" 2 965 "int32" `670 
f G "spi_speed" 2 965 "void(int8 stream,int32 baud,int32 clock)" `667 
v L "data" 2 966 "int8" `672 
f B "spi_prewrite" 2 966 "void(int8 data)" `671 
v L "data" 2 967 "int16" `674 
f G "spi_prewrite" 2 967 "void(int16 data)" `673 
v L "data" 2 968 "int32" `676 
f G "spi_prewrite" 2 968 "void(int32 data)" `675 
v L "??65535" 2 969 "int8" `678 
v L "data" 2 969 "int8" `679 
f G "spi_prewrite" 2 969 "void(int8 ,int8 data)" `677 
v L "??65535" 2 970 "int8" `678 
v L "data" 2 970 "int16" `682 
f G "spi_prewrite" 2 970 "void(int8 ,int16 data)" `680 
v L "??65535" 2 971 "int8" `678 
v L "data" 2 971 "int32" `685 
f G "spi_prewrite" 2 971 "void(int8 ,int32 data)" `683 
f B "spi_xfer_in" 2 972 "int8()" `686 
f G "spi_xfer_in" 2 973 "int16()" `687 
f G "spi_xfer_in" 2 974 "int32()" `688 
v L "bits" 2 975 "int8" `690 
f G "spi_xfer_in" 2 975 "int8(int8 bits)" `689 
v L "bits" 2 976 "int8" `692 
f G "spi_xfer_in" 2 976 "int16(int8 bits)" `691 
v L "bits" 2 977 "int8" `694 
f G "spi_xfer_in" 2 977 "int32(int8 bits)" `693 
v L "stream" 2 978 "int8" `696 
v L "bits" 2 978 "int8" `697 
f G "spi_xfer_in" 2 978 "int8(int8 stream,int8 bits)" `695 
v L "stream" 2 979 "int8" `696 
v L "bits" 2 979 "int8" `700 
f G "spi_xfer_in" 2 979 "int16(int8 stream,int8 bits)" `698 
v L "stream" 2 980 "int8" `696 
v L "bits" 2 980 "int8" `703 
f G "spi_xfer_in" 2 980 "int32(int8 stream,int8 bits)" `701  "#use rtos() Prototypes:"
f B "rtos_run" 2 983 "void()" `704 
f B "rtos_yield" 2 984 "void()" `705 
v L "task" 2 985 "int8" `707 
f B "rtos_enable" 2 985 "void(int8 task)" `706 
v L "task" 2 986 "int8" `709 
f B "rtos_disable" 2 986 "void(int8 task)" `708 
f B "rtos_terminate" 2 987 "void()" `710 
v L "flag" 2 988 "int8" `712 
f B "rtos_await" 2 988 "void(int8 flag)" `711 
v L "sem" 2 989 "int8" `714 
f B "rtos_wait" 2 989 "void(int8 sem)" `713 
v L "sem" 2 990 "int8" `716 
f B "rtos_signal" 2 990 "void(int8 sem)" `715 
v L "task" 2 991 "int8" `718 
v L "msg" 2 991 "int8" `719 
f B "rtos_msg_send" 2 991 "void(int8 task,int8 msg)" `717 
f B "rtos_msg_read" 2 992 "int8()" `720 
f B "rtos_msg_poll" 2 993 "int8()" `721 
v L "task" 2 994 "int8" `723 
f B "rtos_overrun" 2 994 "int8(int8 task)" `722 
v L "task" 2 995 "int8" `725 
v L "stat" 2 995 "*int8" `726 
f B "rtos_stats" 2 995 "void(int8 task,*int8 stat)" `724  "#use timer() Prototypes:"
f B "get_ticks" 2 998 "int8()" `727 
f G "get_ticks" 2 999 "int16()" `728 
f G "get_ticks" 2 1000 "int32()" `729 
f G "get_ticks" 2 1001 "?()" `730 
v L "stream" 2 1002 "int8" `732 
f G "get_ticks" 2 1002 "int8(int8 stream)" `731 
v L "stream" 2 1003 "int8" `734 
f G "get_ticks" 2 1003 "int16(int8 stream)" `733 
v L "stream" 2 1004 "int8" `736 
f G "get_ticks" 2 1004 "int32(int8 stream)" `735 
v L "stream" 2 1005 "int8" `738 
f G "get_ticks" 2 1005 "?(int8 stream)" `737 
v L "value" 2 1006 "int8" `740 
f B "set_ticks" 2 1006 "void(int8 value)" `739 
v L "value" 2 1007 "int16" `742 
f G "set_ticks" 2 1007 "void(int16 value)" `741 
v L "value" 2 1008 "int32" `744 
f G "set_ticks" 2 1008 "void(int32 value)" `743 
v L "value" 2 1009 "?" `746 
f G "set_ticks" 2 1009 "void(? value)" `745 
v L "stream" 2 1010 "int8" `748 
v L "value" 2 1010 "int8" `749 
f G "set_ticks" 2 1010 "void(int8 stream,int8 value)" `747 
v L "stream" 2 1011 "int8" `748 
v L "value" 2 1011 "int16" `752 
f G "set_ticks" 2 1011 "void(int8 stream,int16 value)" `750 
v L "stream" 2 1012 "int8" `748 
v L "value" 2 1012 "int32" `755 
f G "set_ticks" 2 1012 "void(int8 stream,int32 value)" `753 
v L "stream" 2 1013 "int8" `748 
v L "value" 2 1013 "?" `758 
f G "set_ticks" 2 1013 "void(int8 stream,? value)" `756  "#use pwm() Prototypes:"
f B "pwm_on" 2 1016 "void()" `759 
v L "stream" 2 1017 "int8" `761 
f G "pwm_on" 2 1017 "void(int8 stream)" `760 
f B "pwm_off" 2 1018 "void()" `762 
v L "stream" 2 1019 "int8" `764 
f G "pwm_off" 2 1019 "void(int8 stream)" `763 
v L "duty" 2 1020 "int16" `766 
f B "pwm_set_duty" 2 1020 "void(int16 duty)" `765 
v L "stream" 2 1021 "int8" `768 
v L "duty" 2 1021 "int16" `769 
f G "pwm_set_duty" 2 1021 "void(int8 stream,int16 duty)" `767 
v L "percent" 2 1022 "int16" `771 
f B "pwm_set_duty_percent" 2 1022 "void(int16 percent)" `770 
v L "stream" 2 1023 "int8" `773 
v L "percent" 2 1023 "int16" `774 
f G "pwm_set_duty_percent" 2 1023 "void(int8 stream,int16 percent)" `772 
v L "frequency" 2 1024 "int32" `776 
f B "pwm_set_frequency" 2 1024 "void(int32 frequency)" `775 
v L "stream" 2 1025 "int8" `778 
v L "frequency" 2 1025 "int32" `779 
f G "pwm_set_frequency" 2 1025 "void(int8 stream,int32 frequency)" `777  "#use capture() Prototypes:"
f B "get_capture_time" 2 1028 "int16()" `780 
v L "stream" 2 1029 "int8" `782 
f G "get_capture_time" 2 1029 "int16(int8 stream)" `781 
f B "get_capture_event" 2 1030 "int8()" `783 
v L "stream" 2 1031 "int8" `785 
f G "get_capture_event" 2 1031 "int8(int8 stream)" `784  "Enviroment Prototypes:"
c L "get_capture_event" 2 1 2 "FUNCTION"
v L "address" 2 1040 "int16" `787 
f B "goto_address" 2 1040 "void(int16 address)" `786 
v L "label" 2 1041 "int16" `789 
f B "label_address" 2 1041 "int16(int16 label)" `788  "Program Memory Prototypes:"
v L "address" 2 1044 "int16" `791 
v L "dataptr" 2 1044 "*int8" `792 
v L "count" 2 1044 "int16" `793 
f B "read_program_memory" 2 1044 "void(int16 address,*int8 dataptr,int16 count)" `790 
v L "address" 2 1045 "int16" `795 
f B "erase_program_memory" 2 1045 "void(int16 address)" `794 
v L "address" 2 1046 "int16" `797 
v L "dataptr" 2 1046 "*int8" `798 
v L "count" 2 1046 "int16" `799 
f B "write_program_memory" 2 1046 "void(int16 address,*int8 dataptr,int16 count)" `796 
v L "dataptr" 2 1047 "*int8" `801 
v L "count" 2 1047 "int8" `802 
f B "read_configuration_memory" 2 1047 "void(*int8 dataptr,int8 count)" `800 
v L "dataptr" 2 1048 "*int8" `804 
v L "count" 2 1048 "int8" `805 
f B "write_configuration_memory" 2 1048 "void(*int8 dataptr,int8 count)" `803  "INT"
c L "write_configuration_memory" 2 1 4 "FUNCTION"
v L "interrupt" 2 1055 "int16" `807 
f B "enable_interrupts" 2 1055 "void(int16 interrupt)" `806 
v L "interrupt" 2 1056 "int16" `809 
f B "disable_interrupts" 2 1056 "void(int16 interrupt)" `808 
v L "interrupt" 2 1057 "int16" `811 
f B "clear_interrupt" 2 1057 "void(int16 interrupt)" `810 
v L "interrupt" 2 1058 "int16" `813 
f B "interrupt_adctive" 2 1058 "int8(int16 interrupt)" `812 
v L "source" 2 1059 "int8" `815 
v L "edge" 2 1059 "int8" `816 
f B "ext_int_edge" 2 1059 "void(int8 source,int8 edge)" `814 
v L "address" 2 1060 "int16" `818 
f B "jump_to_isr" 2 1060 "void(int16 address)" `817  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 1062 "0x40"
d G "H_TO_L" 2 1063 "0"
d G "INTR_GLOBAL" 2 1066 "0x400"
d G "GLOBAL" 2 1067 "0x400" "For compatibility with PIC16/18"
d G "INTR_NORMAL" 2 1068 "0x100"
d G "INTR_ALTERNATE" 2 1069 "0x200"
d G "INTR_LEVEL0" 2 1070 "0x500"
d G "INTR_LEVEL1" 2 1071 "0x501"
d G "INTR_LEVEL2" 2 1072 "0x502"
d G "INTR_LEVEL3" 2 1073 "0x503"
d G "INTR_LEVEL4" 2 1074 "0x504"
d G "INTR_LEVEL5" 2 1075 "0x505"
d G "INTR_LEVEL6" 2 1076 "0x506"
d G "INTR_LEVEL7" 2 1077 "0x507"
d G "INTR_CN_PIN" 2 1079 "0x8000" "or in a PIN_xx constant"
d G "INT_OSCFAIL" 2 1081 "1"
d G "INT_ADDRERR" 2 1082 "2"
d G "INT_STACKERR" 2 1083 "3"
d G "INT_MATHERR" 2 1084 "4"
d G "INT_DMAERR" 2 1085 "5"
d G "INT_EXT0" 2 1086 "6"
d G "INT_IC1" 2 1087 "7"
d G "INT_OC1" 2 1088 "8"
d G "INT_TIMER1" 2 1089 "9"
d G "INT_DMA0" 2 1090 "69"
d G "INT_IC2" 2 1091 "70"
d G "INT_OC2" 2 1092 "71"
d G "INT_TIMER2" 2 1093 "72"
d G "INT_TIMER3" 2 1094 "73"
d G "INT_SPI1E" 2 1095 "74"
d G "INT_SPI1" 2 1096 "75"
d G "INT_RDA" 2 1097 "76"
d G "INT_TBE" 2 1098 "77"
d G "INT_ADC1" 2 1099 "78"
d G "INT_DMA1" 2 1100 "79"
d G "INT_SI2C" 2 1101 "81"
d G "INT_MI2C" 2 1102 "82"
d G "INT_CNI" 2 1103 "84"
d G "INT_EXT1" 2 1104 "85"
d G "INT_IC7" 2 1105 "87"
d G "INT_IC8" 2 1106 "88"
d G "INT_DMA2" 2 1107 "89"
d G "INT_OC3" 2 1108 "90"
d G "INT_OC4" 2 1109 "91"
d G "INT_TIMER4" 2 1110 "92"
d G "INT_TIMER5" 2 1111 "93"
d G "INT_EXT2" 2 1112 "94"
d G "INT_RDA2" 2 1113 "95"
d G "INT_TBE2" 2 1114 "96"
d G "INT_SPI2E" 2 1115 "97"
d G "INT_SPI2" 2 1116 "98"
d G "INT_C1RX" 2 1117 "99"
d G "INT_CAN1" 2 1118 "100"
d G "INT_DMA3" 2 1119 "101"
d G "INT_PWM1" 2 1120 "110"
d G "INT_DMA4" 2 1121 "111"
d G "INT_QEI" 2 1122 "123"
d G "INT_DMA5" 2 1123 "126"
d G "INT_PWM2" 2 1124 "127"
d G "INT_FAULTA" 2 1125 "128"
d G "INT_UART1E" 2 1126 "130"
d G "INT_UART2E" 2 1127 "131"
d G "INT_QEI2" 2 1128 "132"
d G "INT_DMA6" 2 1129 "133"
d G "INT_DMA7" 2 1130 "134"
d G "INT_C1TX" 2 1131 "135"
d G "INT_FAULTA2" 2 1132 "139"
d G "INT_COMP" 2 1133 "152"
d G "INT_PMP" 2 1134 "164"
d G "INT_RTC" 2 1135 "173"
d G "INT_CRC" 2 1136 "174"
C L "jump_to_isr" 1 8 1 "FUNCTION"
D G "MATH_H" 3 30 ""
D G "PI" 3 35 "3.1415926535897932"
D G "SQRT2" 3 38 "1.4142135623730950"
C L "jump_to_isr" 3 2 3 "FUNCTION"
V L "x" 3 45 "float" `828 
V L "n" 3 45 "int8" `829 
F G "CEIL_FLOOR" 3 46 "float(float x,int8 n)" `827 
V L "y" 3 47 "float" `830 
V L "res" 3 47 "float" `831 
V L "l" 3 48 "int16" `832 
V L "s" 3 49 "int1" `833 
C L "CEIL_FLOOR" 3 2 2 "FUNCTION"
V L "x" 3 96 "?" `848 
V L "n" 3 96 "int8" `849 
F G "CEIL_FLOOR" 3 97 "?(? x,int8 n)" `847 
V L "y" 3 98 "?" `850 
V L "res" 3 98 "?" `851 
V L "l" 3 99 "int32" `852 
V L "s" 3 100 "int1" `853 
C L "CEIL_FLOOR" 3 2 1 "FUNCTION"
V L "x" 3 149 "?" `868 
V L "n" 3 149 "int8" `869 
F G "CEIL_FLOOR" 3 150 "?(? x,int8 n)" `867 
V L "y" 3 151 "?" `870 
V L "res" 3 151 "?" `871 
V L "l" 3 152 "?" `872 
V L "s" 3 153 "int1" `873 
C L "floor" 3 2 3 "FUNCTION"
V L "x" 3 207 "float" `892 
F G "floor" 3 208 "float(float x)" `891 
C L "floor" 3 2 2 "FUNCTION"
V L "x" 3 214 "?" `894 
F G "floor" 3 215 "?(? x)" `893 
C L "floor" 3 2 1 "FUNCTION"
V L "x" 3 220 "?" `896 
F G "floor" 3 221 "?(? x)" `895 
C L "ceil" 3 2 3 "FUNCTION"
V L "x" 3 233 "float" `898 
F G "ceil" 3 234 "float(float x)" `897 
C L "ceil" 3 2 2 "FUNCTION"
V L "x" 3 240 "?" `900 
F G "ceil" 3 241 "?(? x)" `899 
C L "ceil" 3 2 1 "FUNCTION"
V L "x" 3 246 "?" `902 
F G "ceil" 3 247 "?(? x)" `901 
D G "fabs" 3 259 "abs"
C L "fmod" 3 2 6 "FUNCTION"
V L "x" 3 271 "float" `904 
V L "y" 3 271 "float" `905 
F G "fmod" 3 272 "float(float x,float y)" `903 
V L "i" 3 273 "float" `906 
C L "fmod" 3 2 2 "FUNCTION"
V L "x" 3 291 "?" `911 
V L "y" 3 291 "?" `912 
F G "fmod" 3 292 "?(? x,? y)" `910 
V L "i" 3 293 "?" `913 
C L "fmod" 3 2 1 "FUNCTION"
V L "x" 3 309 "?" `918 
V L "y" 3 309 "?" `919 
F G "fmod" 3 310 "?(? x,? y)" `917 
V L "i" 3 311 "?" `920 
D G "LN2" 3 334 "0.6931471805599453"
D G "LN2_INV" 3 335 "1.4426950408889634073"
V G "pe" 3 337 "[6]" `924 
V L "x" 3 341 "float" `928 
F G "exp" 3 342 "float(float x)" `927 
V L "y" 3 343 "float" `929 
V L "res" 3 343 "float" `930 
V L "r" 3 343 "float" `931 
V L "data1" 3 345 "sint8" `932 
V L "n" 3 347 "sint8" `933 
V L "s" 3 348 "int1" `934 
C L "exp" 3 2 1 "FUNCTION"
C L "exp" 3 2 2 "FUNCTION"
V L "x" 3 400 "?" `938 
F G "exp" 3 401 "?(? x)" `937 
V L "y" 3 402 "?" `939 
V L "res" 3 402 "?" `940 
V L "r" 3 402 "?" `941 
V L "data1" 3 403 "sint8" `942 
V L "n" 3 404 "sint8" `943 
V L "s" 3 405 "int1" `944 
V G "pe_64" 3 449 "[12]" `947 
V L "x" 3 456 "?" `951 
F G "exp" 3 457 "?(? x)" `950 
V L "y" 3 458 "?" `952 
V L "res" 3 458 "?" `953 
V L "r" 3 458 "?" `954 
V L "data1" 3 459 "int16" `955 
V L "data2" 3 459 "int16" `956 
V L "p" 3 460 "*int16" `957 
V L "n" 3 461 "sint16" `958 
V L "s" 3 462 "int1" `959 
V G "pl" 3 525 "[4]" `960 
V G "ql" 3 526 "[4]" `963 
C L "log" 3 2 3 "FUNCTION"
V L "x" 3 534 "float" `967 
F G "log" 3 535 "float(float x)" `966 
V L "y" 3 536 "float" `968 
V L "res" 3 536 "float" `969 
V L "r" 3 536 "float" `970 
V L "y2" 3 536 "float" `971 
V L "data1" 3 538 "int8" `972 
V L "data2" 3 538 "int8" `973 
V L "n" 3 540 "sint8" `974 
C L "log" 3 2 1 "FUNCTION"
V G "pl_64" 3 610 "[4]" `975 
V G "ql_64" 3 613 "[4]" `978 
V L "x" 3 616 "?" `982 
F G "log" 3 617 "?(? x)" `981 
V L "y" 3 618 "?" `983 
V L "res" 3 618 "?" `984 
V L "r" 3 618 "?" `985 
V L "y2" 3 618 "?" `986 
V L "data1" 3 619 "int8" `987 
V L "data2" 3 619 "int8" `988 
V L "n" 3 620 "sint8" `989 
V L "x" 3 684 "?" `991 
F G "log" 3 685 "?(? x)" `990 
V L "y" 3 686 "?" `992 
V L "res" 3 686 "?" `993 
V L "r" 3 686 "?" `994 
V L "y2" 3 686 "?" `995 
V L "data1" 3 687 "int16" `996 
V L "data2" 3 687 "int16" `997 
V L "p" 3 688 "*int16" `998 
V L "n" 3 689 "sint16" `999 
D G "LN10" 3 758 "2.3025850929940456"
D G "LN10_INV" 3 759 "0.4342944819032518276"
C L "log10" 3 2 3 "FUNCTION"
V L "x" 3 767 "float" `1001 
F G "log10" 3 768 "float(float x)" `1000 
V L "r" 3 769 "float" `1002 
C L "log10" 3 2 2 "FUNCTION"
V L "x" 3 779 "?" `1004 
F G "log10" 3 780 "?(? x)" `1003 
V L "r" 3 781 "?" `1005 
C L "log10" 3 2 1 "FUNCTION"
V L "x" 3 789 "?" `1007 
F G "log10" 3 790 "?(? x)" `1006 
V L "r" 3 791 "?" `1008 
C L "modf" 3 2 6 "FUNCTION"
V L "value" 3 808 "float" `1010 
V L "iptr" 3 808 "*float" `1011 
F G "modf" 3 809 "float(float value,*float iptr)" `1009 
C L "modf" 3 2 2 "FUNCTION"
V L "value" 3 816 "?" `1013 
V L "iptr" 3 816 "?" `1014 
F G "modf" 3 817 "?(? value,? iptr)" `1012 
C L "modf" 3 2 1 "FUNCTION"
V L "value" 3 822 "?" `1016 
V L "iptr" 3 822 "?" `1017 
F G "modf" 3 823 "?(? value,? iptr)" `1015 
C L "pwr" 3 2 4 "FUNCTION"
V L "x" 3 836 "float" `1019 
V L "y" 3 836 "float" `1020 
F G "pwr" 3 837 "float(float x,float y)" `1018 
C L "pwr" 3 2 2 "FUNCTION"
V L "x" 3 855 "?" `1022 
V L "y" 3 855 "?" `1023 
F G "pwr" 3 856 "?(? x,? y)" `1021 
C L "pwr" 3 2 1 "FUNCTION"
V L "x" 3 872 "?" `1025 
V L "y" 3 872 "?" `1026 
F G "pwr" 3 873 "?(? x,? y)" `1024 
C L "pow" 3 2 5 "FUNCTION"
V L "x" 3 899 "float" `1028 
V L "y" 3 899 "float" `1029 
F G "pow" 3 900 "float(float x,float y)" `1027 
C L "pow" 3 2 2 "FUNCTION"
V L "x" 3 918 "?" `1031 
V L "y" 3 918 "?" `1032 
F G "pow" 3 919 "?(? x,? y)" `1030 
C L "pow" 3 2 1 "FUNCTION"
V L "x" 3 936 "?" `1034 
V L "y" 3 936 "?" `1035 
F G "pow" 3 937 "?(? x,? y)" `1033 
C L "sqrt" 3 2 3 "FUNCTION"
V L "x" 3 960 "float" `1037 
F G "sqrt" 3 961 "float(float x)" `1036 
V L "y" 3 962 "float" `1038 
V L "res" 3 962 "float" `1039 
V L "data1" 3 964 "int16" `1040 
V L "data2" 3 964 "int16" `1041 
V L "p" 3 966 "*int8" `1042 
C L "sqrt" 3 2 2 "FUNCTION"
V L "x" 3 1032 "?" `1044 
F G "sqrt" 3 1033 "?(? x)" `1043 
V L "y" 3 1034 "?" `1045 
V L "res" 3 1034 "?" `1046 
V L "data1" 3 1035 "int16" `1047 
V L "data2" 3 1035 "int16" `1048 
V L "p" 3 1036 "*int8" `1049 
C L "sqrt" 3 2 1 "FUNCTION"
V L "x" 3 1099 "?" `1051 
F G "sqrt" 3 1100 "?(? x)" `1050 
V L "y" 3 1101 "?" `1052 
V L "res" 3 1101 "?" `1053 
V L "p" 3 1102 "*int16" `1054 
V L "temp1" 3 1103 "int16" `1055 
V L "temp2" 3 1103 "int16" `1056 
D G "PI_DIV_BY_TWO_INV" 3 1155 "0.63661977236758134"
D G "PI_DIV_BY_TWO" 3 1159 "1.5707963267948966"
D G "TWOBYPI" 3 1163 "0.6366197723675813"
C L "cos" 3 2 3 "FUNCTION"
V L "x" 3 1171 "float" `1058 
F G "cos" 3 1172 "float(float x)" `1057 
V L "y" 3 1173 "float" `1059 
V L "t" 3 1173 "float" `1060 
V L "t2" 3 1173 "float" `1061 
V L "quad" 3 1174 "int8" `1062 
V L "i" 3 1174 "int8" `1063 
V L "frac" 3 1175 "float" `1064 
V L "p" 3 1176 "float[5]" `1065  "by the series definition for cosine"
C L "cos" 3 2 1 "FUNCTION"
C L "cos" 3 2 2 "FUNCTION"
C L "cos" 3 2 1 "FUNCTION"
C L "cos" 3 2 1 "FUNCTION"
C L "cos" 3 2 1 "FUNCTION"
C L "cos" 3 2 1 "FUNCTION"
C L "cos" 3 2 1 "FUNCTION"
C L "cos" 3 2 1 "FUNCTION"
C L "cos" 3 2 2 "FUNCTION"
V L "x" 3 1217 "?" `1067 
F G "cos" 3 1218 "?(? x)" `1066 
V L "y" 3 1219 "?" `1068 
V L "t" 3 1219 "?" `1069 
V L "t2" 3 1219 "?" `1070 
V L "quad" 3 1220 "int8" `1071 
V L "i" 3 1220 "int8" `1072 
V L "frac" 3 1221 "?" `1073 
V L "p" 3 1222 "?[6]" `1074  "by the series definition for cosine"
C L "cos" 3 2 1 "FUNCTION"
C L "cos" 3 2 2 "FUNCTION"
C L "cos" 3 2 1 "FUNCTION"
C L "cos" 3 2 1 "FUNCTION"
C L "cos" 3 2 1 "FUNCTION"
C L "cos" 3 2 1 "FUNCTION"
C L "cos" 3 2 1 "FUNCTION"
C L "cos" 3 2 1 "FUNCTION"
C L "cos" 3 2 1 "FUNCTION"
V L "x" 3 1261 "?" `1076 
F G "cos" 3 1262 "?(? x)" `1075 
V L "y" 3 1263 "?" `1077 
V L "t" 3 1263 "?" `1078 
V L "t2" 3 1263 "?" `1079 
V L "quad" 3 1264 "int8" `1080 
V L "i" 3 1264 "int8" `1081 
V L "frac" 3 1265 "?" `1082 
V L "p_64" 3 1266 "?[9]" `1083  "by the series definition for cosine"
C L "cos" 3 2 1 "FUNCTION"
C L "cos" 3 2 1 "FUNCTION"
C L "cos" 3 2 1 "FUNCTION"
C L "cos" 3 2 1 "FUNCTION"
C L "cos" 3 2 1 "FUNCTION"
C L "cos" 3 2 1 "FUNCTION"
C L "cos" 3 2 1 "FUNCTION"
C L "sin" 3 2 3 "FUNCTION"
V L "x" 3 1312 "float" `1085 
F G "sin" 3 1313 "float(float x)" `1084 
C L "sin" 3 2 2 "FUNCTION"
V L "x" 3 1320 "?" `1087 
F G "sin" 3 1321 "?(? x)" `1086 
C L "sin" 3 2 1 "FUNCTION"
V L "x" 3 1326 "?" `1089 
F G "sin" 3 1327 "?(? x)" `1088 
C L "tan" 3 2 3 "FUNCTION"
V L "x" 3 1338 "float" `1091 
F G "tan" 3 1339 "float(float x)" `1090 
V L "c" 3 1340 "float" `1092 
V L "s" 3 1340 "float" `1093 
C L "tan" 3 2 2 "FUNCTION"
V L "x" 3 1352 "?" `1095 
F G "tan" 3 1353 "?(? x)" `1094 
V L "c" 3 1354 "?" `1096 
V L "s" 3 1354 "?" `1097 
C L "tan" 3 2 1 "FUNCTION"
V L "x" 3 1365 "?" `1099 
F G "tan" 3 1366 "?(? x)" `1098 
V L "c" 3 1367 "?" `1100 
V L "s" 3 1367 "?" `1101 
V G "pas" 3 1378 "[3]" `1102 
V G "qas" 3 1379 "[3]" `1105 
V L "x" 3 1381 "float" `1109 
V L "n" 3 1381 "int8" `1110 
F G "ASIN_COS" 3 1382 "float(float x,int8 n)" `1108 
V L "y" 3 1383 "float" `1111 
V L "res" 3 1383 "float" `1112 
V L "r" 3 1383 "float" `1113 
V L "y2" 3 1383 "float" `1114 
V L "s" 3 1384 "int1" `1115 
C L "ASIN_COS" 3 2 1 "FUNCTION"
C L "ASIN_COS" 3 2 1 "FUNCTION"
C L "ASIN_COS" 3 2 2 "FUNCTION"
V L "x" 3 1430 "?" `1117 
V L "n" 3 1430 "int8" `1118 
F G "ASIN_COS" 3 1431 "?(? x,int8 n)" `1116 
V L "y" 3 1432 "?" `1119 
V L "res" 3 1432 "?" `1120 
V L "r" 3 1432 "?" `1121 
V L "y2" 3 1432 "?" `1122 
V L "s" 3 1433 "int1" `1123 
C L "ASIN_COS" 3 2 1 "FUNCTION"
C L "ASIN_COS" 3 2 1 "FUNCTION"
V G "pas_64" 3 1476 "?[5]" `1124 
V G "qas_64" 3 1479 "?[5]" `1125 
V L "x" 3 1482 "?" `1127 
V L "n" 3 1482 "int8" `1128 
F G "ASIN_COS" 3 1483 "?(? x,int8 n)" `1126 
V L "y" 3 1484 "?" `1129 
V L "res" 3 1484 "?" `1130 
V L "r" 3 1484 "?" `1131 
V L "y2" 3 1484 "?" `1132 
V L "s" 3 1485 "int1" `1133 
C L "ASIN_COS" 3 2 1 "FUNCTION"
C L "ASIN_COS" 3 2 1 "FUNCTION"
C L "asin" 3 2 3 "FUNCTION"
V L "x" 3 1539 "float" `1135 
F G "asin" 3 1540 "float(float x)" `1134 
V L "r" 3 1541 "float" `1136 
C L "asin" 3 2 2 "FUNCTION"
V L "x" 3 1549 "?" `1138 
F G "asin" 3 1550 "?(? x)" `1137 
V L "r" 3 1551 "?" `1139 
C L "asin" 3 2 1 "FUNCTION"
V L "x" 3 1558 "?" `1141 
F G "asin" 3 1559 "?(? x)" `1140 
V L "r" 3 1560 "?" `1142 
C L "acos" 3 2 3 "FUNCTION"
V L "x" 3 1573 "float" `1144 
F G "acos" 3 1574 "float(float x)" `1143 
V L "r" 3 1575 "float" `1145 
C L "acos" 3 2 2 "FUNCTION"
V L "x" 3 1583 "?" `1147 
F G "acos" 3 1584 "?(? x)" `1146 
V L "r" 3 1585 "?" `1148 
C L "acos" 3 2 1 "FUNCTION"
V L "x" 3 1592 "?" `1150 
F G "acos" 3 1593 "?(? x)" `1149 
V L "r" 3 1594 "?" `1151 
V G "pat" 3 1601 "[4]" `1152 
V G "qat" 3 1602 "[4]" `1155 
C L "atan" 3 2 3 "FUNCTION"
V L "x" 3 1610 "float" `1159 
F G "atan" 3 1611 "float(float x)" `1158 
V L "y" 3 1612 "float" `1160 
V L "res" 3 1612 "float" `1161 
V L "r" 3 1612 "float" `1162 
V L "s" 3 1613 "int1" `1163 
V L "flag" 3 1613 "int1" `1164 
C L "atan" 3 2 1 "FUNCTION"
C L "atan" 3 2 2 "FUNCTION"
V L "x" 3 1652 "?" `1166 
F G "atan" 3 1653 "?(? x)" `1165 
V L "y" 3 1654 "?" `1167 
V L "res" 3 1654 "?" `1168 
V L "r" 3 1654 "?" `1169 
V L "s" 3 1655 "int1" `1170 
V L "flag" 3 1655 "int1" `1171 
C L "atan" 3 2 1 "FUNCTION"
V G "pat_64" 3 1692 "?[6]" `1172 
V G "qat_64" 3 1695 "?[6]" `1173 
C L "atan" 3 2 1 "FUNCTION"
V L "x" 3 1698 "?" `1175 
F G "atan" 3 1699 "?(? x)" `1174 
V L "y" 3 1700 "?" `1176 
V L "y2" 3 1700 "?" `1177 
V L "res" 3 1700 "?" `1178 
V L "r" 3 1700 "?" `1179 
V L "s" 3 1701 "int1" `1180 
V L "flag" 3 1701 "int1" `1181 
C L "atan" 3 2 1 "FUNCTION"
C L "atan2" 3 2 5 "FUNCTION"
V L "y" 3 1753 "float" `1183 
V L "x" 3 1753 "float" `1184 
F G "atan2" 3 1754 "float(float y,float x)" `1182 
V L "z" 3 1755 "float" `1185 
V L "sign" 3 1756 "int1" `1186 
V L "quad" 3 1757 "int8" `1187 
C L "atan2" 3 2 1 "FUNCTION"
C L "atan2" 3 2 1 "FUNCTION"
C L "atan2" 3 2 2 "FUNCTION"
V L "y" 3 1825 "?" `1189 
V L "x" 3 1825 "?" `1190 
F G "atan2" 3 1826 "?(? y,? x)" `1188 
V L "z" 3 1827 "?" `1191 
V L "sign" 3 1828 "int1" `1192 
V L "quad" 3 1829 "int8" `1193 
C L "atan2" 3 2 1 "FUNCTION"
C L "atan2" 3 2 1 "FUNCTION"
C L "atan2" 3 2 1 "FUNCTION"
V L "y" 3 1895 "?" `1195 
V L "x" 3 1895 "?" `1196 
F G "atan2" 3 1896 "?(? y,? x)" `1194 
V L "z" 3 1897 "?" `1197 
V L "sign" 3 1898 "int1" `1198 
V L "quad" 3 1899 "int8" `1199 
C L "atan2" 3 2 1 "FUNCTION"
C L "atan2" 3 2 1 "FUNCTION"
C L "cosh" 3 2 5 "FUNCTION"
V L "x" 3 1975 "float" `1201 
F G "cosh" 3 1976 "float(float x)" `1200 
C L "cosh" 3 2 2 "FUNCTION"
V L "x" 3 1982 "?" `1203 
F G "cosh" 3 1983 "?(? x)" `1202 
C L "cosh" 3 2 1 "FUNCTION"
V L "x" 3 1988 "?" `1205 
F G "cosh" 3 1989 "?(? x)" `1204 
C L "sinh" 3 2 4 "FUNCTION"
V L "x" 3 2002 "float" `1207 
F G "sinh" 3 2003 "float(float x)" `1206 
C L "sinh" 3 2 2 "FUNCTION"
V L "x" 3 2010 "?" `1209 
F G "sinh" 3 2011 "?(? x)" `1208 
C L "sinh" 3 2 1 "FUNCTION"
V L "x" 3 2017 "?" `1211 
F G "sinh" 3 2018 "?(? x)" `1210 
C L "tanh" 3 2 4 "FUNCTION"
V L "x" 3 2032 "float" `1213 
F G "tanh" 3 2033 "float(float x)" `1212 
C L "tanh" 3 2 2 "FUNCTION"
V L "x" 3 2039 "?" `1215 
F G "tanh" 3 2040 "?(? x)" `1214 
C L "tanh" 3 2 1 "FUNCTION"
V L "x" 3 2045 "?" `1217 
F G "tanh" 3 2046 "?(? x)" `1216 
D G "LOG2" 3 2062 ".30102999566398119521"
D G "LOG2_INV" 3 2063 "3.32192809488736234787"
V L "x" 3 2064 "float" `1219 
V L "exp" 3 2064 "*sint8" `1220 
F G "frexp" 3 2065 "float(float x,*sint8 exp)" `1218 
V L "res" 3 2066 "float" `1221 
V L "sign" 3 2067 "int1" `1222 
C L "frexp" 3 2 2 "FUNCTION"
V L "x" 3 2111 "?" `1224 
V L "exp" 3 2111 "*sint8" `1225 
F G "frexp" 3 2112 "?(? x,*sint8 exp)" `1223 
V L "res" 3 2113 "?" `1226 
V L "sign" 3 2114 "int1" `1227 
C L "frexp" 3 2 1 "FUNCTION"
V L "x" 3 2156 "?" `1229 
V L "exp" 3 2156 "*sint8" `1230 
F G "frexp" 3 2157 "?(? x,*sint8 exp)" `1228 
V L "res" 3 2158 "?" `1231 
V L "sign" 3 2159 "int1" `1232 
C L "ldexp" 3 2 4 "FUNCTION"
V L "value" 3 2209 "float" `1236 
V L "exp" 3 2209 "sint8" `1237 
F G "ldexp" 3 2210 "float(float value,sint8 exp)" `1235 
C L "ldexp" 3 2 2 "FUNCTION"
V L "value" 3 2217 "?" `1239 
V L "exp" 3 2217 "sint8" `1240 
F G "ldexp" 3 2218 "?(? value,sint8 exp)" `1238 
C L "ldexp" 3 2 1 "FUNCTION"
V L "value" 3 2222 "?" `1242 
V L "exp" 3 2222 "sint8" `1243 
F G "ldexp" 3 2223 "?(? value,sint8 exp)" `1241 
D G "_STDIO" 4 12 ""
D G "_STRING" 5 12 ""
D G "_STDDEF" 6 13 ""
D G "ptrdiff_t" 6 18 "unsigned int16"
D G "size_t" 6 24 "unsigned int16"
D G "wchar_t" 6 26 "char"
D G "NULL" 6 27 "0"
D G "offsetof" 6 29 "(s,f) (offsetofbit(s,f)/8)"
D G "_CTYPE" 7 12 ""
D G "islower" 7 14 "(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz")"
D G "isupper" 7 15 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ")"
D G "isalnum" 7 16 "(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isalpha" 7 17 "(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz")"
D G "isdigit" 7 18 "(x)  isamong(x,"0123456789")"
D G "isspace" 7 19 "(x)  ((x)==' ')"
D G "isxdigit" 7 20 "(x) isamong(x,"0123456789ABCDEFabcdef")"
D G "iscntrl" 7 21 "(x)  ((x)<' ')"
D G "isprint" 7 22 "(x)  ((x)>=' ')"
D G "isgraph" 7 23 "(x)  ((x)>' ')"
D G "ispunct" 7 24 "(x)  (((x)>' ')&&!isalnum(x))"
C L "memmove" 5 19 10 "FUNCTION"
V L "s1" 5 34 "*int8" `1245 
V L "s2" 5 34 "*sint8" `1246 
V L "n" 5 34 "int16" `1247 
F G "memmove" 5 35 "*sint8(*int8 s1,*sint8 s2,int16 n)" `1244 
V L "sc1" 5 36 "*sint8" `1248 
V L "sc2" 5 37 "*sint8" `1249 
D G "strcopy" 5 54 "strcpy"
C L "strncpy" 5 19 4 "FUNCTION"
V L "s1" 5 61 "*sint8" `1251 
V L "s2" 5 61 "*sint8" `1252 
V L "n" 5 61 "int16" `1253 
F G "strncpy" 5 62 "*sint8(*sint8 s1,*sint8 s2,int16 n)" `1250 
V L "s" 5 63 "*sint8" `1254 
C L "strcat" 5 19 3 "FUNCTION"
V L "s1" 5 78 "*sint8" `1256 
V L "s2" 5 78 "*sint8" `1257 
F G "strcat" 5 79 "*sint8(*sint8 s1,*sint8 s2)" `1255 
V L "s" 5 80 "*sint8" `1258 
C L "strncat" 5 19 2 "FUNCTION"
V L "s1" 5 96 "*sint8" `1260 
V L "s2" 5 96 "*sint8" `1261 
V L "n" 5 96 "int16" `1262 
F G "strncat" 5 97 "*sint8(*sint8 s1,*sint8 s2,int16 n)" `1259 
V L "s" 5 98 "*sint8" `1263 
C L "memcmp" 5 19 3 "FUNCTION"
V L "s1" 5 120 "*int8" `1265 
V L "s2" 5 120 "*sint8" `1266 
V L "n" 5 120 "int16" `1267 
F G "memcmp" 5 121 "sint8(*int8 s1,*sint8 s2,int16 n)" `1264 
V L "su1" 5 122 "*sint8" `1268 
V L "su2" 5 122 "*sint8" `1269 
C L "strcmp" 5 19 2 "FUNCTION"
V L "s1" 5 134 "*sint8" `1271 
V L "s2" 5 134 "*sint8" `1272 
F G "strcmp" 5 135 "sint8(*sint8 s1,*sint8 s2)" `1270 
C L "strcoll" 5 19 2 "FUNCTION"
V L "s1" 5 144 "*sint8" `1274 
V L "s2" 5 144 "*sint8" `1275 
F G "strcoll" 5 145 "sint8(*sint8 s1,*sint8 s2)" `1273 
C L "strncmp" 5 19 4 "FUNCTION"
V L "s1" 5 157 "*sint8" `1277 
V L "s2" 5 157 "*sint8" `1278 
V L "n" 5 157 "int16" `1279 
F G "strncmp" 5 158 "sint8(*sint8 s1,*sint8 s2,int16 n)" `1276 
C L "strxfrm" 5 19 3 "FUNCTION"
V L "s1" 5 169 "*sint8" `1281 
V L "s2" 5 169 "*sint8" `1282 
V L "n" 5 169 "int16" `1283 
F G "strxfrm" 5 170 "int16(*sint8 s1,*sint8 s2,int16 n)" `1280 
V L "s" 5 171 "*sint8" `1284 
V L "n1" 5 172 "int8" `1285 
C L "memchr" 5 19 3 "FUNCTION"
V L "s" 5 191 "*int8" `1287 
V L "c" 5 191 "int8" `1288 
V L "n" 5 191 "int16" `1289 
F G "memchr" 5 192 "*sint8(*int8 s,int8 c,int16 n)" `1286 
V L "uc" 5 193 "sint8" `1290 
V L "su" 5 194 "*sint8" `1291 
C L "strchr" 5 19 2 "FUNCTION"
V L "s" 5 205 "*sint8" `1293 
V L "c" 5 205 "int8" `1294 
F G "strchr" 5 206 "*sint8(*sint8 s,int8 c)" `1292 
C L "strcspn" 5 19 4 "FUNCTION"
V L "s1" 5 217 "*sint8" `1296 
V L "s2" 5 217 "*sint8" `1297 
F G "strcspn" 5 218 "int8(*sint8 s1,*sint8 s2)" `1295 
V L "sc1" 5 219 "*sint8" `1298 
V L "sc2" 5 219 "*sint8" `1299 
C L "strpbrk" 5 19 4 "FUNCTION"
V L "s1" 5 232 "*sint8" `1301 
V L "s2" 5 232 "*sint8" `1302 
F G "strpbrk" 5 233 "*sint8(*sint8 s1,*sint8 s2)" `1300 
V L "sc1" 5 234 "*sint8" `1303 
V L "sc2" 5 234 "*sint8" `1304 
C L "strrchr" 5 19 2 "FUNCTION"
V L "s" 5 247 "*sint8" `1306 
V L "c" 5 247 "int8" `1307 
F G "strrchr" 5 248 "*sint8(*sint8 s,int8 c)" `1305 
V L "p" 5 249 "*sint8" `1308 
C L "strspn" 5 19 2 "FUNCTION"
V L "s1" 5 262 "*sint8" `1310 
V L "s2" 5 262 "*sint8" `1311 
F G "strspn" 5 263 "int8(*sint8 s1,*sint8 s2)" `1309 
V L "sc1" 5 264 "*sint8" `1312 
V L "sc2" 5 264 "*sint8" `1313 
C L "strstr" 5 19 6 "FUNCTION"
V L "s1" 5 281 "*sint8" `1315 
V L "s2" 5 281 "*sint8" `1316 
F G "strstr" 5 282 "*sint8(*sint8 s1,*sint8 s2)" `1314 
V L "s" 5 283 "*sint8" `1317 
V L "t" 5 283 "*sint8" `1318 
C L "strtok" 5 19 13 "FUNCTION"
V L "s1" 5 320 "*sint8" `1320 
V L "s2" 5 320 "*sint8" `1321 
F G "strtok" 5 321 "*sint8(*sint8 s1,*sint8 s2)" `1319 
V L "beg" 5 322 "*sint8" `1322 
V L "end" 5 322 "*sint8" `1323 
V L "save" 5 323 "*sint8" `1324 
C L "strlen" 5 19 6 "FUNCTION"
V L "s" 5 369 "*sint8" `1326 
F G "strlen" 5 370 "int8(*sint8 s)" `1325 
V L "sc" 5 371 "*sint8" `1327 
C L "stricmp" 5 19 2 "FUNCTION"
V L "s1" 5 380 "*sint8" `1329 
V L "s2" 5 380 "*sint8" `1330 
F G "stricmp" 5 381 "sint8(*sint8 s1,*sint8 s2)" `1328 
C L "strlwr" 5 19 3 "FUNCTION"
V L "s" 5 394 "*sint8" `1334 
F G "strlwr" 5 395 "*sint8(*sint8 s)" `1333 
V L "p" 5 396 "*sint8" `1335 
C L "strupr" 5 19 3 "FUNCTION"
V L "s" 5 408 "*sint8" `1337 
F G "strupr" 5 409 "*sint8(*sint8 s)" `1336 
V L "p" 5 410 "*sint8" `1338 
D G "BUFFER_SIZE" 1 24 "256"
D G "COEF_LENGTH" 1 25 "64"
D G "LOADER_PAGES" 1 26 "50"
D G "ADC_MAX_DATA_VALUE" 1 27 "255"
D G "LED_PIN" 1 28 "PIN_B14"
T G "IndexType" 1 30 "int32" `1339 
T G "FlagType" 1 31 "int8" `1340 
V G "ADC_DMA_CHANNEL" 1 33 "int8" `1341 
V G "UART_TX_DMA_CHANNEL" 1 34 "int8" `1343 
V G "NumberOfDigitizationRequired" 1 35 "IndexType" `1345 
V G "TimerTicks" 1 37 "int16" `1347 
V G "ConversionValue" 1 39 "int8" `1348  "normalized value"
V G "AnalogData" 1 40 "int8[256]" `1349  "input array"
V G "CSharpCoefficent" 1 42 "int8[2]" `1350  "array to hold byte data of coefficents"
V G "InitialTriggerValue" 1 44 "int16" `1351 
V G "TriggerValue" 1 45 "int16" `1352 
V G "ByteConversionResult" 1 47 "sint16" `1353 
V G "Accumulator" 1 49 "sint32" `1354 
V G "DigitizedData" 1 50 "sint32[256]" `1355  "output array"
V G "DebugAccumulator" 1 51 "sint32[256]" `1356  "output array"
V G "MaxAnalogValue" 1 52 "sint32" `1357 
V G "MinAnalogValue" 1 53 "sint32" `1358 
V G "AverageAnalogValue" 1 55 "?" `1359 
V G "InputSamples" 1 57 "sint16[64]" `1360  "array used as a circular buffer for the input samples"
V G "OutputValue" 1 59 "float" `1361  "holds the current output value"
V G "AverageDivider" 1 60 "float" `1362 
V G "AverageMultiplier" 1 61 "float" `1363 
V G "UARTRX" 1 63 "sint8" `1364  "data in"
V G "CSharpCoefficentRecieved" 1 65 "IndexType" `1365 
V G "CoefficentIndex" 1 66 "IndexType" `1366 
V G "InputIndex" 1 67 "IndexType" `1367 
V G "CurrentIndex" 1 68 "IndexType" `1368 
V G "NumberCSharpByteRecieved" 1 69 "IndexType" `1369 
V G "ErrorCounter" 1 70 "IndexType" `1370 
V G "DMADoneFlag" 1 72 "FlagType" `1371 
V G "NormalizeFlag" 1 73 "FlagType" `1372 
V G "UARTRXFlag" 1 74 "FlagType" `1373 
V G "UARTTXFlag" 1 75 "FlagType" `1374 
V G "HandShakeFlag" 1 76 "FlagType" `1375 
V G "TriggerFlag" 1 77 "FlagType" `1376 
V G "DMAFlag" 1 78 "FlagType" `1377 
V L "??65535" 1 80 "IndexType" `1379 
F G "AccumulateAnalogData" 1 80 "void(IndexType )" `1378 
F G "NormalizeData" 1 81 "void()" `1380 
V G "fir_coef" 1 83 "sint16[64]" `1381 
C L "NormalizeData" 1 44 1 "FUNCTION"
C L "NormalizeData" 1 44 1 "FUNCTION"
V G "DMA_ADC_BUFFER" 0 5 "int16[256]" `1386 
V G "DMA_UART_TX_BUFFER" 0 7 "sint8[256]" `1387  "Todo:: Two DMA Buffers for real time data sampling"
F G "DMA_0_ISR" 0 13 "void()" `1388 
F G "DMA_1_ISR" 0 19 "void()" `1389 
F G "Timer_ISR" 0 24 "void()" `1390 
V L "ADCValue" 0 32 "int8" `1391 
C L "Timer_ISR" 0 66 1 "FUNCTION"
F G "ISR_UART2" 0 85 "void()" `1392 
C L "ISR_UART2" 0 66 1 "FUNCTION"
C L "ISR_UART2" 0 66 1 "FUNCTION"
F G "MAIN" 0 91 "void()" `1393 
C L "MAIN" 0 66 2 "FUNCTION"
C L "MAIN" 0 66 4 "FUNCTION"
V L "Index" 0 129 "IndexType" `1396 
C L "MAIN" 0 66 3 "FUNCTION"
V L "i" 0 147 "IndexType" `1397 
C L "MAIN" 0 66 1 "FUNCTION"
C L "MAIN" 0 66 1 "FUNCTION"
C L "MAIN" 0 66 1 "FUNCTION"
C L "MAIN" 0 66 1 "FUNCTION"
C L "MAIN" 0 66 2 "FUNCTION"
V L "NumberOfDigitizationRequired" 0 164 "IndexType" `1401 
F G "AccumulateAnalogData" 0 165 "void(IndexType NumberOfDigitizationRequired)" `1378 
V L "DMAADCIndex" 0 166 "IndexType" `1400 
V L "Index" 0 167 "IndexType" `1401 
C L "AccumulateAnalogData" 0 66 1 "FUNCTION"
C L "AccumulateAnalogData" 0 66 1 "FUNCTION"
V L "StepOne" 0 206 "float" `1405 
V L "StepTwo" 0 207 "float" `1408 
V L "StepThree" 0 208 "float" `1409 
C L "AccumulateAnalogData" 0 66 2 "FUNCTION"
F G "NormalizeData" 0 220 "void()" `1380 
C L "NormalizeData" 0 66 1 "FUNCTION"
C L "NormalizeData" 0 66 1 "FUNCTION"
V L "Index" 0 227 "IndexType" `1410 
V L "i" 0 258 "IndexType" `1416 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "bit_first" 2 0
F B "bit_last" 1 2
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "dsp_a" 1 2
F B "dsp_b" 1 2
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_memory" 1 0
F B "write_program_memory" 3 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "set_open_drain_a" 1 0
F B "set_open_drain_b" 1 0
F B "set_pullup" 1 2
F B "pin_select" 2 4
F B "setup_wdt" 1 0
F B "restart_cause" 0 1
F B "restart_wdt" 0 0
F B "setup_oscillator" 1 3
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer1" 1 2
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer2" 1 2
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer3" 1 2
F B "get_timer3" 0 0
F B "set_timer3" 1 0
F B "get_timer23" 0 0
F B "set_timer23" 1 0
F B "setup_timer4" 1 2
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_timer5" 1 2
F B "get_timer5" 0 0
F B "set_timer5" 1 0
F B "get_timer45" 0 0
F B "set_timer45" 1 0
F B "setup_capture" 2 0
F B "get_capture" 1 2
F B "setup_compare" 2 0
F B "set_compare_time" 2 3
F B "set_pwm_duty" 2 0
F B "setup_vref" 1 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "spi_read_16" 0 1
F B "spi_write_16" 1 2
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "spi_read2_16" 0 1
F B "spi_write2_16" 1 2
F B "setup_spi3" 1 0
F B "spi_read3" 0 1
F B "spi_write3" 1 2
F B "spi_data_is_in3" 0 0
F B "spi_read3_16" 0 1
F B "spi_write3_16" 1 2
F B "setup_spi4" 1 0
F B "spi_read4" 0 1
F B "spi_write4" 1 2
F B "spi_data_is_in4" 0 0
F B "spi_read4_16" 0 1
F B "spi_write4_16" 1 2
F B "setup_crc" F B "crc_init" 0 1
F B "crc_calc8" 1 2
F B "crc_calc" 1 2
F B "crc_calc16" 1 2
F B "setup_pmp" 2 0
F B "setup_psp" 2 0
F B "pmp_address" 1 0
F B "pmp_read" 0 0
F B "pmp_write" 1 0
F B "psp_read" 0 1
F B "psp_write" 1 2
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "pmp_output_full" 0 0
F B "pmp_input_full" 0 0
F B "pmp_overflow" 0 0
F B "setup_rtc" 1 2
F B "setup_rtc_alarm" 1 3
F B "rtc_read" 1 0
F B "rtc_write" 1 0
F B "rtc_alarm_read" 1 0
F B "rtc_alarm_write" 1 0
F B "setup_qei" 1 4
F B "qei_set_count" 1 2
F B "qei_get_count" 0 1
F B "qei_status" 0 1
F B "setup_motor_pwm" 2 5
F B "set_motor_unit" 5 0
F B "set_motor_pwm_duty" 3 0
F B "set_motor_pwm_event" 2 0
F B "get_motor_pwm_count" 1 0
F B "setup_dma" 3 0
F B "dma_start" 3 5
F B "dma_status" 1 0
F B "setup_dci" 5 0
F B "dci_start" 0 0
F B "dci_write" 1 0
F B "dci_read" 0 0
F B "dci_transmit_ready" 0 0
F B "dci_data_received" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
F B "delay_ms" 1 0
F B "delay_us" 1 0
